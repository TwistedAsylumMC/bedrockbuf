// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: types.proto

package bedrockbuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AchievementAwardedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId int32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
}

func (x *AchievementAwardedEventData) Reset() {
	*x = AchievementAwardedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementAwardedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementAwardedEventData) ProtoMessage() {}

func (x *AchievementAwardedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementAwardedEventData.ProtoReflect.Descriptor instead.
func (*AchievementAwardedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *AchievementAwardedEventData) GetAchievementId() int32 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

type AgentCommandEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentResult int32  `protobuf:"varint,1,opt,name=agent_result,json=agentResult,proto3" json:"agent_result,omitempty"`
	DataValue   int32  `protobuf:"varint,2,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	Command     string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	DataKey     string `protobuf:"bytes,4,opt,name=data_key,json=dataKey,proto3" json:"data_key,omitempty"`
	Output      string `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *AgentCommandEventData) Reset() {
	*x = AgentCommandEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentCommandEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCommandEventData) ProtoMessage() {}

func (x *AgentCommandEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCommandEventData.ProtoReflect.Descriptor instead.
func (*AgentCommandEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *AgentCommandEventData) GetAgentResult() int32 {
	if x != nil {
		return x.AgentResult
	}
	return 0
}

func (x *AgentCommandEventData) GetDataValue() int32 {
	if x != nil {
		return x.DataValue
	}
	return 0
}

func (x *AgentCommandEventData) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *AgentCommandEventData) GetDataKey() string {
	if x != nil {
		return x.DataKey
	}
	return ""
}

func (x *AgentCommandEventData) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value   float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Max     float32 `protobuf:"fixed32,3,opt,name=max,proto3" json:"max,omitempty"`
	Min     float32 `protobuf:"fixed32,4,opt,name=min,proto3" json:"min,omitempty"`
	Default float32 `protobuf:"fixed32,5,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Attribute) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Attribute) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Attribute) GetDefault() float32 {
	if x != nil {
		return x.Default
	}
	return 0
}

type AutoCraftRecipeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeNetworkId uint32 `protobuf:"varint,1,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
	TimesCrafted    uint32 `protobuf:"varint,2,opt,name=times_crafted,json=timesCrafted,proto3" json:"times_crafted,omitempty"`
}

func (x *AutoCraftRecipeStackRequestAction) Reset() {
	*x = AutoCraftRecipeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoCraftRecipeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoCraftRecipeStackRequestAction) ProtoMessage() {}

func (x *AutoCraftRecipeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoCraftRecipeStackRequestAction.ProtoReflect.Descriptor instead.
func (*AutoCraftRecipeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *AutoCraftRecipeStackRequestAction) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

func (x *AutoCraftRecipeStackRequestAction) GetTimesCrafted() uint32 {
	if x != nil {
		return x.TimesCrafted
	}
	return 0
}

type BeaconPaymentStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryEffect   int32 `protobuf:"varint,1,opt,name=primary_effect,json=primaryEffect,proto3" json:"primary_effect,omitempty"`
	SecondaryEffect int32 `protobuf:"varint,2,opt,name=secondary_effect,json=secondaryEffect,proto3" json:"secondary_effect,omitempty"`
}

func (x *BeaconPaymentStackRequestAction) Reset() {
	*x = BeaconPaymentStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconPaymentStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconPaymentStackRequestAction) ProtoMessage() {}

func (x *BeaconPaymentStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconPaymentStackRequestAction.ProtoReflect.Descriptor instead.
func (*BeaconPaymentStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *BeaconPaymentStackRequestAction) GetPrimaryEffect() int32 {
	if x != nil {
		return x.PrimaryEffect
	}
	return 0
}

func (x *BeaconPaymentStackRequestAction) GetSecondaryEffect() int32 {
	if x != nil {
		return x.SecondaryEffect
	}
	return 0
}

type BehaviourPackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Version         string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Size            uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ContentKey      string `protobuf:"bytes,4,opt,name=content_key,json=contentKey,proto3" json:"content_key,omitempty"`
	SubPackName     string `protobuf:"bytes,5,opt,name=sub_pack_name,json=subPackName,proto3" json:"sub_pack_name,omitempty"`
	ContentIdentity string `protobuf:"bytes,6,opt,name=content_identity,json=contentIdentity,proto3" json:"content_identity,omitempty"`
	HasScripts      bool   `protobuf:"varint,7,opt,name=has_scripts,json=hasScripts,proto3" json:"has_scripts,omitempty"`
}

func (x *BehaviourPackInfo) Reset() {
	*x = BehaviourPackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehaviourPackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehaviourPackInfo) ProtoMessage() {}

func (x *BehaviourPackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehaviourPackInfo.ProtoReflect.Descriptor instead.
func (*BehaviourPackInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *BehaviourPackInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BehaviourPackInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BehaviourPackInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BehaviourPackInfo) GetContentKey() string {
	if x != nil {
		return x.ContentKey
	}
	return ""
}

func (x *BehaviourPackInfo) GetSubPackName() string {
	if x != nil {
		return x.SubPackName
	}
	return ""
}

func (x *BehaviourPackInfo) GetContentIdentity() string {
	if x != nil {
		return x.ContentIdentity
	}
	return ""
}

func (x *BehaviourPackInfo) GetHasScripts() bool {
	if x != nil {
		return x.HasScripts
	}
	return false
}

type BellUsedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId int32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *BellUsedEventData) Reset() {
	*x = BellUsedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BellUsedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BellUsedEventData) ProtoMessage() {}

func (x *BellUsedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BellUsedEventData.ProtoReflect.Descriptor instead.
func (*BellUsedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *BellUsedEventData) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type BlockChangeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockPos                   *Vector3I `protobuf:"bytes,1,opt,name=block_pos,json=blockPos,proto3" json:"block_pos,omitempty"`
	BlockRuntimeId             uint32    `protobuf:"varint,2,opt,name=block_runtime_id,json=blockRuntimeId,proto3" json:"block_runtime_id,omitempty"`
	Flags                      uint32    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	SyncedUpdateEntityUniqueId uint64    `protobuf:"varint,4,opt,name=synced_update_entity_unique_id,json=syncedUpdateEntityUniqueId,proto3" json:"synced_update_entity_unique_id,omitempty"`
	SyncedUpdateType           uint32    `protobuf:"varint,5,opt,name=synced_update_type,json=syncedUpdateType,proto3" json:"synced_update_type,omitempty"`
}

func (x *BlockChangeEntry) Reset() {
	*x = BlockChangeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockChangeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockChangeEntry) ProtoMessage() {}

func (x *BlockChangeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockChangeEntry.ProtoReflect.Descriptor instead.
func (*BlockChangeEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *BlockChangeEntry) GetBlockPos() *Vector3I {
	if x != nil {
		return x.BlockPos
	}
	return nil
}

func (x *BlockChangeEntry) GetBlockRuntimeId() uint32 {
	if x != nil {
		return x.BlockRuntimeId
	}
	return 0
}

func (x *BlockChangeEntry) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *BlockChangeEntry) GetSyncedUpdateEntityUniqueId() uint64 {
	if x != nil {
		return x.SyncedUpdateEntityUniqueId
	}
	return 0
}

func (x *BlockChangeEntry) GetSyncedUpdateType() uint32 {
	if x != nil {
		return x.SyncedUpdateType
	}
	return 0
}

type BlockEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties map[string]*anypb.Any `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlockEntry) Reset() {
	*x = BlockEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockEntry) ProtoMessage() {}

func (x *BlockEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockEntry.ProtoReflect.Descriptor instead.
func (*BlockEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *BlockEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockEntry) GetProperties() map[string]*anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

type BossKilledEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossEntityUniqueId    int64 `protobuf:"varint,1,opt,name=boss_entity_unique_id,json=bossEntityUniqueId,proto3" json:"boss_entity_unique_id,omitempty"`
	PlayerPartySize       int32 `protobuf:"varint,2,opt,name=player_party_size,json=playerPartySize,proto3" json:"player_party_size,omitempty"`
	InteractionEntityType int32 `protobuf:"varint,3,opt,name=interaction_entity_type,json=interactionEntityType,proto3" json:"interaction_entity_type,omitempty"`
}

func (x *BossKilledEventData) Reset() {
	*x = BossKilledEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossKilledEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossKilledEventData) ProtoMessage() {}

func (x *BossKilledEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossKilledEventData.ProtoReflect.Descriptor instead.
func (*BossKilledEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *BossKilledEventData) GetBossEntityUniqueId() int64 {
	if x != nil {
		return x.BossEntityUniqueId
	}
	return 0
}

func (x *BossKilledEventData) GetPlayerPartySize() int32 {
	if x != nil {
		return x.PlayerPartySize
	}
	return 0
}

func (x *BossKilledEventData) GetInteractionEntityType() int32 {
	if x != nil {
		return x.InteractionEntityType
	}
	return 0
}

type CacheBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    uint64   `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Payload []uint32 `protobuf:"varint,2,rep,packed,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CacheBlob) Reset() {
	*x = CacheBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheBlob) ProtoMessage() {}

func (x *CacheBlob) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheBlob.ProtoReflect.Descriptor instead.
func (*CacheBlob) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *CacheBlob) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *CacheBlob) GetPayload() []uint32 {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CauldronInteractEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockInteractionType int32 `protobuf:"varint,1,opt,name=block_interaction_type,json=blockInteractionType,proto3" json:"block_interaction_type,omitempty"`
	ItemId               int32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *CauldronInteractEventData) Reset() {
	*x = CauldronInteractEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CauldronInteractEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CauldronInteractEventData) ProtoMessage() {}

func (x *CauldronInteractEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CauldronInteractEventData.ProtoReflect.Descriptor instead.
func (*CauldronInteractEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *CauldronInteractEventData) GetBlockInteractionType() int32 {
	if x != nil {
		return x.BlockInteractionType
	}
	return 0
}

func (x *CauldronInteractEventData) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type CauldronUsedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PotionId  int32 `protobuf:"varint,1,opt,name=potion_id,json=potionId,proto3" json:"potion_id,omitempty"`
	Colour    int32 `protobuf:"varint,2,opt,name=colour,proto3" json:"colour,omitempty"`
	FillLevel int32 `protobuf:"varint,3,opt,name=fill_level,json=fillLevel,proto3" json:"fill_level,omitempty"`
}

func (x *CauldronUsedEventData) Reset() {
	*x = CauldronUsedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CauldronUsedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CauldronUsedEventData) ProtoMessage() {}

func (x *CauldronUsedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CauldronUsedEventData.ProtoReflect.Descriptor instead.
func (*CauldronUsedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *CauldronUsedEventData) GetPotionId() int32 {
	if x != nil {
		return x.PotionId
	}
	return 0
}

func (x *CauldronUsedEventData) GetColour() int32 {
	if x != nil {
		return x.Colour
	}
	return 0
}

func (x *CauldronUsedEventData) GetFillLevel() int32 {
	if x != nil {
		return x.FillLevel
	}
	return 0
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Flags           uint32             `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	PermissionLevel uint32             `protobuf:"varint,4,opt,name=permission_level,json=permissionLevel,proto3" json:"permission_level,omitempty"`
	Aliases         []string           `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Overloads       []*CommandOverload `protobuf:"bytes,6,rep,name=overloads,proto3" json:"overloads,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Command) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Command) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Command) GetPermissionLevel() uint32 {
	if x != nil {
		return x.PermissionLevel
	}
	return 0
}

func (x *Command) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Command) GetOverloads() []*CommandOverload {
	if x != nil {
		return x.Overloads
	}
	return nil
}

type CommandEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Options []string `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	Dynamic bool     `protobuf:"varint,3,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
}

func (x *CommandEnum) Reset() {
	*x = CommandEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandEnum) ProtoMessage() {}

func (x *CommandEnum) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandEnum.ProtoReflect.Descriptor instead.
func (*CommandEnum) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *CommandEnum) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CommandEnum) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CommandEnum) GetDynamic() bool {
	if x != nil {
		return x.Dynamic
	}
	return false
}

type CommandEnumConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnumOption  string   `protobuf:"bytes,1,opt,name=enum_option,json=enumOption,proto3" json:"enum_option,omitempty"`
	EnumName    string   `protobuf:"bytes,2,opt,name=enum_name,json=enumName,proto3" json:"enum_name,omitempty"`
	Constraints []uint32 `protobuf:"varint,3,rep,packed,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *CommandEnumConstraint) Reset() {
	*x = CommandEnumConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandEnumConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandEnumConstraint) ProtoMessage() {}

func (x *CommandEnumConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandEnumConstraint.ProtoReflect.Descriptor instead.
func (*CommandEnumConstraint) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *CommandEnumConstraint) GetEnumOption() string {
	if x != nil {
		return x.EnumOption
	}
	return ""
}

func (x *CommandEnumConstraint) GetEnumName() string {
	if x != nil {
		return x.EnumName
	}
	return ""
}

func (x *CommandEnumConstraint) GetConstraints() []uint32 {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type CommandOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin         uint32 `protobuf:"varint,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Uuid           string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RequestId      string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PlayerUniqueId int64  `protobuf:"varint,4,opt,name=player_unique_id,json=playerUniqueId,proto3" json:"player_unique_id,omitempty"`
}

func (x *CommandOrigin) Reset() {
	*x = CommandOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandOrigin) ProtoMessage() {}

func (x *CommandOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandOrigin.ProtoReflect.Descriptor instead.
func (*CommandOrigin) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *CommandOrigin) GetOrigin() uint32 {
	if x != nil {
		return x.Origin
	}
	return 0
}

func (x *CommandOrigin) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CommandOrigin) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CommandOrigin) GetPlayerUniqueId() int64 {
	if x != nil {
		return x.PlayerUniqueId
	}
	return 0
}

type CommandOutputMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message    string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Parameters []string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *CommandOutputMessage) Reset() {
	*x = CommandOutputMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandOutputMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandOutputMessage) ProtoMessage() {}

func (x *CommandOutputMessage) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandOutputMessage.ProtoReflect.Descriptor instead.
func (*CommandOutputMessage) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (x *CommandOutputMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommandOutputMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommandOutputMessage) GetParameters() []string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CommandOverload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters []*CommandParameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *CommandOverload) Reset() {
	*x = CommandOverload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandOverload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandOverload) ProtoMessage() {}

func (x *CommandOverload) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandOverload.ProtoReflect.Descriptor instead.
func (*CommandOverload) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *CommandOverload) GetParameters() []*CommandParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CommandParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     uint32       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Optional bool         `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty"`
	Options  uint32       `protobuf:"varint,4,opt,name=options,proto3" json:"options,omitempty"`
	Enum     *CommandEnum `protobuf:"bytes,5,opt,name=enum,proto3" json:"enum,omitempty"`
	Suffix   string       `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *CommandParameter) Reset() {
	*x = CommandParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandParameter) ProtoMessage() {}

func (x *CommandParameter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandParameter.ProtoReflect.Descriptor instead.
func (*CommandParameter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *CommandParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommandParameter) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommandParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *CommandParameter) GetOptions() uint32 {
	if x != nil {
		return x.Options
	}
	return 0
}

func (x *CommandParameter) GetEnum() *CommandEnum {
	if x != nil {
		return x.Enum
	}
	return nil
}

func (x *CommandParameter) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

type ComposterInteractEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockInteractionType int32 `protobuf:"varint,1,opt,name=block_interaction_type,json=blockInteractionType,proto3" json:"block_interaction_type,omitempty"`
	ItemId               int32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *ComposterInteractEventData) Reset() {
	*x = ComposterInteractEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposterInteractEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposterInteractEventData) ProtoMessage() {}

func (x *ComposterInteractEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposterInteractEventData.ProtoReflect.Descriptor instead.
func (*ComposterInteractEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *ComposterInteractEventData) GetBlockInteractionType() int32 {
	if x != nil {
		return x.BlockInteractionType
	}
	return 0
}

func (x *ComposterInteractEventData) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type ConsumeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestroyStackRequestAction *DestroyStackRequestAction `protobuf:"bytes,1,opt,name=destroy_stack_request_action,json=destroyStackRequestAction,proto3" json:"destroy_stack_request_action,omitempty"`
}

func (x *ConsumeStackRequestAction) Reset() {
	*x = ConsumeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeStackRequestAction) ProtoMessage() {}

func (x *ConsumeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeStackRequestAction.ProtoReflect.Descriptor instead.
func (*ConsumeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{21}
}

func (x *ConsumeStackRequestAction) GetDestroyStackRequestAction() *DestroyStackRequestAction {
	if x != nil {
		return x.DestroyStackRequestAction
	}
	return nil
}

type CraftCreativeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreativeItemNetworkId uint32 `protobuf:"varint,1,opt,name=creative_item_network_id,json=creativeItemNetworkId,proto3" json:"creative_item_network_id,omitempty"`
}

func (x *CraftCreativeStackRequestAction) Reset() {
	*x = CraftCreativeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftCreativeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftCreativeStackRequestAction) ProtoMessage() {}

func (x *CraftCreativeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftCreativeStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftCreativeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22}
}

func (x *CraftCreativeStackRequestAction) GetCreativeItemNetworkId() uint32 {
	if x != nil {
		return x.CreativeItemNetworkId
	}
	return 0
}

type CraftGrindstoneRecipeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeNetworkId uint32 `protobuf:"varint,1,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
	Cost            int32  `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *CraftGrindstoneRecipeStackRequestAction) Reset() {
	*x = CraftGrindstoneRecipeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftGrindstoneRecipeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftGrindstoneRecipeStackRequestAction) ProtoMessage() {}

func (x *CraftGrindstoneRecipeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftGrindstoneRecipeStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftGrindstoneRecipeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23}
}

func (x *CraftGrindstoneRecipeStackRequestAction) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

func (x *CraftGrindstoneRecipeStackRequestAction) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type CraftLoomRecipeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *CraftLoomRecipeStackRequestAction) Reset() {
	*x = CraftLoomRecipeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftLoomRecipeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftLoomRecipeStackRequestAction) ProtoMessage() {}

func (x *CraftLoomRecipeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftLoomRecipeStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftLoomRecipeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{24}
}

func (x *CraftLoomRecipeStackRequestAction) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type CraftNonImplementedStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CraftNonImplementedStackRequestAction) Reset() {
	*x = CraftNonImplementedStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftNonImplementedStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftNonImplementedStackRequestAction) ProtoMessage() {}

func (x *CraftNonImplementedStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftNonImplementedStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftNonImplementedStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25}
}

type CraftRecipeOptionalStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId         int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FilterStringIndex int32 `protobuf:"varint,2,opt,name=filter_string_index,json=filterStringIndex,proto3" json:"filter_string_index,omitempty"`
}

func (x *CraftRecipeOptionalStackRequestAction) Reset() {
	*x = CraftRecipeOptionalStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftRecipeOptionalStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftRecipeOptionalStackRequestAction) ProtoMessage() {}

func (x *CraftRecipeOptionalStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftRecipeOptionalStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftRecipeOptionalStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26}
}

func (x *CraftRecipeOptionalStackRequestAction) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *CraftRecipeOptionalStackRequestAction) GetFilterStringIndex() int32 {
	if x != nil {
		return x.FilterStringIndex
	}
	return 0
}

type CraftRecipeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeNetworkId uint32 `protobuf:"varint,1,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *CraftRecipeStackRequestAction) Reset() {
	*x = CraftRecipeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftRecipeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftRecipeStackRequestAction) ProtoMessage() {}

func (x *CraftRecipeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftRecipeStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftRecipeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{27}
}

func (x *CraftRecipeStackRequestAction) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type CraftResultsDeprecatedStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultItems  []*ItemStack `protobuf:"bytes,1,rep,name=result_items,json=resultItems,proto3" json:"result_items,omitempty"`
	TimesCrafted uint32       `protobuf:"varint,2,opt,name=times_crafted,json=timesCrafted,proto3" json:"times_crafted,omitempty"`
}

func (x *CraftResultsDeprecatedStackRequestAction) Reset() {
	*x = CraftResultsDeprecatedStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftResultsDeprecatedStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftResultsDeprecatedStackRequestAction) ProtoMessage() {}

func (x *CraftResultsDeprecatedStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftResultsDeprecatedStackRequestAction.ProtoReflect.Descriptor instead.
func (*CraftResultsDeprecatedStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28}
}

func (x *CraftResultsDeprecatedStackRequestAction) GetResultItems() []*ItemStack {
	if x != nil {
		return x.ResultItems
	}
	return nil
}

func (x *CraftResultsDeprecatedStackRequestAction) GetTimesCrafted() uint32 {
	if x != nil {
		return x.TimesCrafted
	}
	return 0
}

type CreateStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultsSlot uint32 `protobuf:"varint,1,opt,name=results_slot,json=resultsSlot,proto3" json:"results_slot,omitempty"`
}

func (x *CreateStackRequestAction) Reset() {
	*x = CreateStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStackRequestAction) ProtoMessage() {}

func (x *CreateStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStackRequestAction.ProtoReflect.Descriptor instead.
func (*CreateStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{29}
}

func (x *CreateStackRequestAction) GetResultsSlot() uint32 {
	if x != nil {
		return x.ResultsSlot
	}
	return 0
}

type CreativeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreativeItemNetworkId uint32     `protobuf:"varint,1,opt,name=creative_item_network_id,json=creativeItemNetworkId,proto3" json:"creative_item_network_id,omitempty"`
	Item                  *ItemStack `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreativeItem) Reset() {
	*x = CreativeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreativeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreativeItem) ProtoMessage() {}

func (x *CreativeItem) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreativeItem.ProtoReflect.Descriptor instead.
func (*CreativeItem) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{30}
}

func (x *CreativeItem) GetCreativeItemNetworkId() uint32 {
	if x != nil {
		return x.CreativeItemNetworkId
	}
	return 0
}

func (x *CreativeItem) GetItem() *ItemStack {
	if x != nil {
		return x.Item
	}
	return nil
}

type DestroyStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Source *StackRequestSlotInfo `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *DestroyStackRequestAction) Reset() {
	*x = DestroyStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyStackRequestAction) ProtoMessage() {}

func (x *DestroyStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyStackRequestAction.ProtoReflect.Descriptor instead.
func (*DestroyStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{31}
}

func (x *DestroyStackRequestAction) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DestroyStackRequestAction) GetSource() *StackRequestSlotInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

type DropStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Source   *StackRequestSlotInfo `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Randomly bool                  `protobuf:"varint,3,opt,name=randomly,proto3" json:"randomly,omitempty"`
}

func (x *DropStackRequestAction) Reset() {
	*x = DropStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropStackRequestAction) ProtoMessage() {}

func (x *DropStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropStackRequestAction.ProtoReflect.Descriptor instead.
func (*DropStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{32}
}

func (x *DropStackRequestAction) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DropStackRequestAction) GetSource() *StackRequestSlotInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DropStackRequestAction) GetRandomly() bool {
	if x != nil {
		return x.Randomly
	}
	return false
}

type EducationExternalLinkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *EducationExternalLinkSettings) Reset() {
	*x = EducationExternalLinkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EducationExternalLinkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EducationExternalLinkSettings) ProtoMessage() {}

func (x *EducationExternalLinkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EducationExternalLinkSettings.ProtoReflect.Descriptor instead.
func (*EducationExternalLinkSettings) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{33}
}

func (x *EducationExternalLinkSettings) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EducationExternalLinkSettings) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type EducationSharedResourceURI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ButtonName string `protobuf:"bytes,1,opt,name=button_name,json=buttonName,proto3" json:"button_name,omitempty"`
	LinkUri    string `protobuf:"bytes,2,opt,name=link_uri,json=linkUri,proto3" json:"link_uri,omitempty"`
}

func (x *EducationSharedResourceURI) Reset() {
	*x = EducationSharedResourceURI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EducationSharedResourceURI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EducationSharedResourceURI) ProtoMessage() {}

func (x *EducationSharedResourceURI) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EducationSharedResourceURI.ProtoReflect.Descriptor instead.
func (*EducationSharedResourceURI) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{34}
}

func (x *EducationSharedResourceURI) GetButtonName() string {
	if x != nil {
		return x.ButtonName
	}
	return ""
}

func (x *EducationSharedResourceURI) GetLinkUri() string {
	if x != nil {
		return x.LinkUri
	}
	return ""
}

type EnchantmentInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *EnchantmentInstance) Reset() {
	*x = EnchantmentInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantmentInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantmentInstance) ProtoMessage() {}

func (x *EnchantmentInstance) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantmentInstance.ProtoReflect.Descriptor instead.
func (*EnchantmentInstance) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{35}
}

func (x *EnchantmentInstance) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EnchantmentInstance) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type EnchantmentOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost            uint32            `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	Enchantments    *ItemEnchantments `protobuf:"bytes,2,opt,name=enchantments,proto3" json:"enchantments,omitempty"`
	Name            string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RecipeNetworkId uint32            `protobuf:"varint,4,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *EnchantmentOption) Reset() {
	*x = EnchantmentOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantmentOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantmentOption) ProtoMessage() {}

func (x *EnchantmentOption) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantmentOption.ProtoReflect.Descriptor instead.
func (*EnchantmentOption) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{36}
}

func (x *EnchantmentOption) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EnchantmentOption) GetEnchantments() *ItemEnchantments {
	if x != nil {
		return x.Enchantments
	}
	return nil
}

func (x *EnchantmentOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnchantmentOption) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type EntityDefinitionTriggerEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
}

func (x *EntityDefinitionTriggerEventData) Reset() {
	*x = EntityDefinitionTriggerEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityDefinitionTriggerEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDefinitionTriggerEventData) ProtoMessage() {}

func (x *EntityDefinitionTriggerEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDefinitionTriggerEventData.ProtoReflect.Descriptor instead.
func (*EntityDefinitionTriggerEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{37}
}

func (x *EntityDefinitionTriggerEventData) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

type EntityInteractEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractionType       int32  `protobuf:"varint,1,opt,name=interaction_type,json=interactionType,proto3" json:"interaction_type,omitempty"`
	InteractionEntityType int32  `protobuf:"varint,2,opt,name=interaction_entity_type,json=interactionEntityType,proto3" json:"interaction_entity_type,omitempty"`
	EntityVariant         int32  `protobuf:"varint,3,opt,name=entity_variant,json=entityVariant,proto3" json:"entity_variant,omitempty"`
	EntityColour          uint32 `protobuf:"varint,4,opt,name=entity_colour,json=entityColour,proto3" json:"entity_colour,omitempty"`
}

func (x *EntityInteractEventData) Reset() {
	*x = EntityInteractEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityInteractEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityInteractEventData) ProtoMessage() {}

func (x *EntityInteractEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityInteractEventData.ProtoReflect.Descriptor instead.
func (*EntityInteractEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{38}
}

func (x *EntityInteractEventData) GetInteractionType() int32 {
	if x != nil {
		return x.InteractionType
	}
	return 0
}

func (x *EntityInteractEventData) GetInteractionEntityType() int32 {
	if x != nil {
		return x.InteractionEntityType
	}
	return 0
}

func (x *EntityInteractEventData) GetEntityVariant() int32 {
	if x != nil {
		return x.EntityVariant
	}
	return 0
}

func (x *EntityInteractEventData) GetEntityColour() uint32 {
	if x != nil {
		return x.EntityColour
	}
	return 0
}

type EntityLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiddenEntityUniqueId int64  `protobuf:"varint,1,opt,name=ridden_entity_unique_id,json=riddenEntityUniqueId,proto3" json:"ridden_entity_unique_id,omitempty"`
	RiderEntityUniqueId  int64  `protobuf:"varint,2,opt,name=rider_entity_unique_id,json=riderEntityUniqueId,proto3" json:"rider_entity_unique_id,omitempty"`
	Type                 uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Immediate            bool   `protobuf:"varint,4,opt,name=immediate,proto3" json:"immediate,omitempty"`
	RiderInitiated       bool   `protobuf:"varint,5,opt,name=rider_initiated,json=riderInitiated,proto3" json:"rider_initiated,omitempty"`
}

func (x *EntityLink) Reset() {
	*x = EntityLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLink) ProtoMessage() {}

func (x *EntityLink) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLink.ProtoReflect.Descriptor instead.
func (*EntityLink) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{39}
}

func (x *EntityLink) GetRiddenEntityUniqueId() int64 {
	if x != nil {
		return x.RiddenEntityUniqueId
	}
	return 0
}

func (x *EntityLink) GetRiderEntityUniqueId() int64 {
	if x != nil {
		return x.RiderEntityUniqueId
	}
	return 0
}

func (x *EntityLink) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EntityLink) GetImmediate() bool {
	if x != nil {
		return x.Immediate
	}
	return false
}

func (x *EntityLink) GetRiderInitiated() bool {
	if x != nil {
		return x.RiderInitiated
	}
	return false
}

type ExperimentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ExperimentData) Reset() {
	*x = ExperimentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentData) ProtoMessage() {}

func (x *ExperimentData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentData.ProtoReflect.Descriptor instead.
func (*ExperimentData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{40}
}

func (x *ExperimentData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExperimentData) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ExtractHoneyEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExtractHoneyEventData) Reset() {
	*x = ExtractHoneyEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractHoneyEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractHoneyEventData) ProtoMessage() {}

func (x *ExtractHoneyEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractHoneyEventData.ProtoReflect.Descriptor instead.
func (*ExtractHoneyEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{41}
}

type FishBucketedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern            int32 `protobuf:"varint,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Preset             int32 `protobuf:"varint,2,opt,name=preset,proto3" json:"preset,omitempty"`
	BucketedEntityType int32 `protobuf:"varint,3,opt,name=bucketed_entity_type,json=bucketedEntityType,proto3" json:"bucketed_entity_type,omitempty"`
	Release            bool  `protobuf:"varint,4,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *FishBucketedEventData) Reset() {
	*x = FishBucketedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishBucketedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishBucketedEventData) ProtoMessage() {}

func (x *FishBucketedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishBucketedEventData.ProtoReflect.Descriptor instead.
func (*FishBucketedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{42}
}

func (x *FishBucketedEventData) GetPattern() int32 {
	if x != nil {
		return x.Pattern
	}
	return 0
}

func (x *FishBucketedEventData) GetPreset() int32 {
	if x != nil {
		return x.Preset
	}
	return 0
}

func (x *FishBucketedEventData) GetBucketedEntityType() int32 {
	if x != nil {
		return x.BucketedEntityType
	}
	return 0
}

func (x *FishBucketedEventData) GetRelease() bool {
	if x != nil {
		return x.Release
	}
	return false
}

type FurnaceDataRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType *ItemType  `protobuf:"bytes,1,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	Output    *ItemStack `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Block     string     `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *FurnaceDataRecipe) Reset() {
	*x = FurnaceDataRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnaceDataRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnaceDataRecipe) ProtoMessage() {}

func (x *FurnaceDataRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnaceDataRecipe.ProtoReflect.Descriptor instead.
func (*FurnaceDataRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{43}
}

func (x *FurnaceDataRecipe) GetInputType() *ItemType {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *FurnaceDataRecipe) GetOutput() *ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *FurnaceDataRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

type FurnaceRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType *ItemType  `protobuf:"bytes,1,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	Output    *ItemStack `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Block     string     `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *FurnaceRecipe) Reset() {
	*x = FurnaceRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnaceRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnaceRecipe) ProtoMessage() {}

func (x *FurnaceRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnaceRecipe.ProtoReflect.Descriptor instead.
func (*FurnaceRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{44}
}

func (x *FurnaceRecipe) GetInputType() *ItemType {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *FurnaceRecipe) GetOutput() *ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *FurnaceRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

type GameRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CanBeModifiedByPlayer bool       `protobuf:"varint,2,opt,name=can_be_modified_by_player,json=canBeModifiedByPlayer,proto3" json:"can_be_modified_by_player,omitempty"`
	Value                 *anypb.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GameRule) Reset() {
	*x = GameRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRule) ProtoMessage() {}

func (x *GameRule) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRule.ProtoReflect.Descriptor instead.
func (*GameRule) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{45}
}

func (x *GameRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameRule) GetCanBeModifiedByPlayer() bool {
	if x != nil {
		return x.CanBeModifiedByPlayer
	}
	return false
}

func (x *GameRule) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type IEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventData:
	//	*IEventData_ProtocolAchievementAwardedEventData
	//	*IEventData_ProtocolAgentCommandEventData
	//	*IEventData_ProtocolBellUsedEventData
	//	*IEventData_ProtocolBossKilledEventData
	//	*IEventData_ProtocolCauldronInteractEventData
	//	*IEventData_ProtocolCauldronUsedEventData
	//	*IEventData_ProtocolComposterInteractEventData
	//	*IEventData_ProtocolEntityDefinitionTriggerEventData
	//	*IEventData_ProtocolEntityInteractEventData
	//	*IEventData_ProtocolExtractHoneyEventData
	//	*IEventData_ProtocolFishBucketedEventData
	//	*IEventData_ProtocolMobBornEventData
	//	*IEventData_ProtocolMobKilledEventData
	//	*IEventData_ProtocolMovementAnomalyEventData
	//	*IEventData_ProtocolMovementCorrectedEventData
	//	*IEventData_ProtocolPatternRemovedEventData
	//	*IEventData_ProtocolPetDiedEventData
	//	*IEventData_ProtocolPlayerDiedEventData
	//	*IEventData_ProtocolPortalBuiltEventData
	//	*IEventData_ProtocolPortalUsedEventData
	//	*IEventData_ProtocolRaidUpdateEventData
	//	*IEventData_ProtocolSlashCommandExecutedEventData
	EventData isIEventData_EventData `protobuf_oneof:"event_data"`
}

func (x *IEventData) Reset() {
	*x = IEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IEventData) ProtoMessage() {}

func (x *IEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IEventData.ProtoReflect.Descriptor instead.
func (*IEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{46}
}

func (m *IEventData) GetEventData() isIEventData_EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (x *IEventData) GetProtocolAchievementAwardedEventData() *AchievementAwardedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolAchievementAwardedEventData); ok {
		return x.ProtocolAchievementAwardedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolAgentCommandEventData() *AgentCommandEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolAgentCommandEventData); ok {
		return x.ProtocolAgentCommandEventData
	}
	return nil
}

func (x *IEventData) GetProtocolBellUsedEventData() *BellUsedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolBellUsedEventData); ok {
		return x.ProtocolBellUsedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolBossKilledEventData() *BossKilledEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolBossKilledEventData); ok {
		return x.ProtocolBossKilledEventData
	}
	return nil
}

func (x *IEventData) GetProtocolCauldronInteractEventData() *CauldronInteractEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolCauldronInteractEventData); ok {
		return x.ProtocolCauldronInteractEventData
	}
	return nil
}

func (x *IEventData) GetProtocolCauldronUsedEventData() *CauldronUsedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolCauldronUsedEventData); ok {
		return x.ProtocolCauldronUsedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolComposterInteractEventData() *ComposterInteractEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolComposterInteractEventData); ok {
		return x.ProtocolComposterInteractEventData
	}
	return nil
}

func (x *IEventData) GetProtocolEntityDefinitionTriggerEventData() *EntityDefinitionTriggerEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolEntityDefinitionTriggerEventData); ok {
		return x.ProtocolEntityDefinitionTriggerEventData
	}
	return nil
}

func (x *IEventData) GetProtocolEntityInteractEventData() *EntityInteractEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolEntityInteractEventData); ok {
		return x.ProtocolEntityInteractEventData
	}
	return nil
}

func (x *IEventData) GetProtocolExtractHoneyEventData() *ExtractHoneyEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolExtractHoneyEventData); ok {
		return x.ProtocolExtractHoneyEventData
	}
	return nil
}

func (x *IEventData) GetProtocolFishBucketedEventData() *FishBucketedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolFishBucketedEventData); ok {
		return x.ProtocolFishBucketedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolMobBornEventData() *MobBornEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolMobBornEventData); ok {
		return x.ProtocolMobBornEventData
	}
	return nil
}

func (x *IEventData) GetProtocolMobKilledEventData() *MobKilledEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolMobKilledEventData); ok {
		return x.ProtocolMobKilledEventData
	}
	return nil
}

func (x *IEventData) GetProtocolMovementAnomalyEventData() *MovementAnomalyEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolMovementAnomalyEventData); ok {
		return x.ProtocolMovementAnomalyEventData
	}
	return nil
}

func (x *IEventData) GetProtocolMovementCorrectedEventData() *MovementCorrectedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolMovementCorrectedEventData); ok {
		return x.ProtocolMovementCorrectedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolPatternRemovedEventData() *PatternRemovedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolPatternRemovedEventData); ok {
		return x.ProtocolPatternRemovedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolPetDiedEventData() *PetDiedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolPetDiedEventData); ok {
		return x.ProtocolPetDiedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolPlayerDiedEventData() *PlayerDiedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolPlayerDiedEventData); ok {
		return x.ProtocolPlayerDiedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolPortalBuiltEventData() *PortalBuiltEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolPortalBuiltEventData); ok {
		return x.ProtocolPortalBuiltEventData
	}
	return nil
}

func (x *IEventData) GetProtocolPortalUsedEventData() *PortalUsedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolPortalUsedEventData); ok {
		return x.ProtocolPortalUsedEventData
	}
	return nil
}

func (x *IEventData) GetProtocolRaidUpdateEventData() *RaidUpdateEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolRaidUpdateEventData); ok {
		return x.ProtocolRaidUpdateEventData
	}
	return nil
}

func (x *IEventData) GetProtocolSlashCommandExecutedEventData() *SlashCommandExecutedEventData {
	if x, ok := x.GetEventData().(*IEventData_ProtocolSlashCommandExecutedEventData); ok {
		return x.ProtocolSlashCommandExecutedEventData
	}
	return nil
}

type isIEventData_EventData interface {
	isIEventData_EventData()
}

type IEventData_ProtocolAchievementAwardedEventData struct {
	ProtocolAchievementAwardedEventData *AchievementAwardedEventData `protobuf:"bytes,1,opt,name=protocol_achievement_awarded_event_data,json=protocolAchievementAwardedEventData,proto3,oneof"`
}

type IEventData_ProtocolAgentCommandEventData struct {
	ProtocolAgentCommandEventData *AgentCommandEventData `protobuf:"bytes,2,opt,name=protocol_agent_command_event_data,json=protocolAgentCommandEventData,proto3,oneof"`
}

type IEventData_ProtocolBellUsedEventData struct {
	ProtocolBellUsedEventData *BellUsedEventData `protobuf:"bytes,3,opt,name=protocol_bell_used_event_data,json=protocolBellUsedEventData,proto3,oneof"`
}

type IEventData_ProtocolBossKilledEventData struct {
	ProtocolBossKilledEventData *BossKilledEventData `protobuf:"bytes,4,opt,name=protocol_boss_killed_event_data,json=protocolBossKilledEventData,proto3,oneof"`
}

type IEventData_ProtocolCauldronInteractEventData struct {
	ProtocolCauldronInteractEventData *CauldronInteractEventData `protobuf:"bytes,5,opt,name=protocol_cauldron_interact_event_data,json=protocolCauldronInteractEventData,proto3,oneof"`
}

type IEventData_ProtocolCauldronUsedEventData struct {
	ProtocolCauldronUsedEventData *CauldronUsedEventData `protobuf:"bytes,6,opt,name=protocol_cauldron_used_event_data,json=protocolCauldronUsedEventData,proto3,oneof"`
}

type IEventData_ProtocolComposterInteractEventData struct {
	ProtocolComposterInteractEventData *ComposterInteractEventData `protobuf:"bytes,7,opt,name=protocol_composter_interact_event_data,json=protocolComposterInteractEventData,proto3,oneof"`
}

type IEventData_ProtocolEntityDefinitionTriggerEventData struct {
	ProtocolEntityDefinitionTriggerEventData *EntityDefinitionTriggerEventData `protobuf:"bytes,8,opt,name=protocol_entity_definition_trigger_event_data,json=protocolEntityDefinitionTriggerEventData,proto3,oneof"`
}

type IEventData_ProtocolEntityInteractEventData struct {
	ProtocolEntityInteractEventData *EntityInteractEventData `protobuf:"bytes,9,opt,name=protocol_entity_interact_event_data,json=protocolEntityInteractEventData,proto3,oneof"`
}

type IEventData_ProtocolExtractHoneyEventData struct {
	ProtocolExtractHoneyEventData *ExtractHoneyEventData `protobuf:"bytes,10,opt,name=protocol_extract_honey_event_data,json=protocolExtractHoneyEventData,proto3,oneof"`
}

type IEventData_ProtocolFishBucketedEventData struct {
	ProtocolFishBucketedEventData *FishBucketedEventData `protobuf:"bytes,11,opt,name=protocol_fish_bucketed_event_data,json=protocolFishBucketedEventData,proto3,oneof"`
}

type IEventData_ProtocolMobBornEventData struct {
	ProtocolMobBornEventData *MobBornEventData `protobuf:"bytes,12,opt,name=protocol_mob_born_event_data,json=protocolMobBornEventData,proto3,oneof"`
}

type IEventData_ProtocolMobKilledEventData struct {
	ProtocolMobKilledEventData *MobKilledEventData `protobuf:"bytes,13,opt,name=protocol_mob_killed_event_data,json=protocolMobKilledEventData,proto3,oneof"`
}

type IEventData_ProtocolMovementAnomalyEventData struct {
	ProtocolMovementAnomalyEventData *MovementAnomalyEventData `protobuf:"bytes,14,opt,name=protocol_movement_anomaly_event_data,json=protocolMovementAnomalyEventData,proto3,oneof"`
}

type IEventData_ProtocolMovementCorrectedEventData struct {
	ProtocolMovementCorrectedEventData *MovementCorrectedEventData `protobuf:"bytes,15,opt,name=protocol_movement_corrected_event_data,json=protocolMovementCorrectedEventData,proto3,oneof"`
}

type IEventData_ProtocolPatternRemovedEventData struct {
	ProtocolPatternRemovedEventData *PatternRemovedEventData `protobuf:"bytes,16,opt,name=protocol_pattern_removed_event_data,json=protocolPatternRemovedEventData,proto3,oneof"`
}

type IEventData_ProtocolPetDiedEventData struct {
	ProtocolPetDiedEventData *PetDiedEventData `protobuf:"bytes,17,opt,name=protocol_pet_died_event_data,json=protocolPetDiedEventData,proto3,oneof"`
}

type IEventData_ProtocolPlayerDiedEventData struct {
	ProtocolPlayerDiedEventData *PlayerDiedEventData `protobuf:"bytes,18,opt,name=protocol_player_died_event_data,json=protocolPlayerDiedEventData,proto3,oneof"`
}

type IEventData_ProtocolPortalBuiltEventData struct {
	ProtocolPortalBuiltEventData *PortalBuiltEventData `protobuf:"bytes,19,opt,name=protocol_portal_built_event_data,json=protocolPortalBuiltEventData,proto3,oneof"`
}

type IEventData_ProtocolPortalUsedEventData struct {
	ProtocolPortalUsedEventData *PortalUsedEventData `protobuf:"bytes,20,opt,name=protocol_portal_used_event_data,json=protocolPortalUsedEventData,proto3,oneof"`
}

type IEventData_ProtocolRaidUpdateEventData struct {
	ProtocolRaidUpdateEventData *RaidUpdateEventData `protobuf:"bytes,21,opt,name=protocol_raid_update_event_data,json=protocolRaidUpdateEventData,proto3,oneof"`
}

type IEventData_ProtocolSlashCommandExecutedEventData struct {
	ProtocolSlashCommandExecutedEventData *SlashCommandExecutedEventData `protobuf:"bytes,22,opt,name=protocol_slash_command_executed_event_data,json=protocolSlashCommandExecutedEventData,proto3,oneof"`
}

func (*IEventData_ProtocolAchievementAwardedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolAgentCommandEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolBellUsedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolBossKilledEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolCauldronInteractEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolCauldronUsedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolComposterInteractEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolEntityDefinitionTriggerEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolEntityInteractEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolExtractHoneyEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolFishBucketedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolMobBornEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolMobKilledEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolMovementAnomalyEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolMovementCorrectedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolPatternRemovedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolPetDiedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolPlayerDiedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolPortalBuiltEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolPortalUsedEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolRaidUpdateEventData) isIEventData_EventData() {}

func (*IEventData_ProtocolSlashCommandExecutedEventData) isIEventData_EventData() {}

type IInventoryTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionData:
	//	*IInventoryTransactionData_ProtocolMismatchTransactionData
	//	*IInventoryTransactionData_ProtocolNormalTransactionData
	//	*IInventoryTransactionData_ProtocolReleaseItemTransactionData
	//	*IInventoryTransactionData_ProtocolUseItemOnEntityTransactionData
	//	*IInventoryTransactionData_ProtocolUseItemTransactionData
	TransactionData isIInventoryTransactionData_TransactionData `protobuf_oneof:"transaction_data"`
}

func (x *IInventoryTransactionData) Reset() {
	*x = IInventoryTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IInventoryTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IInventoryTransactionData) ProtoMessage() {}

func (x *IInventoryTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IInventoryTransactionData.ProtoReflect.Descriptor instead.
func (*IInventoryTransactionData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{47}
}

func (m *IInventoryTransactionData) GetTransactionData() isIInventoryTransactionData_TransactionData {
	if m != nil {
		return m.TransactionData
	}
	return nil
}

func (x *IInventoryTransactionData) GetProtocolMismatchTransactionData() *MismatchTransactionData {
	if x, ok := x.GetTransactionData().(*IInventoryTransactionData_ProtocolMismatchTransactionData); ok {
		return x.ProtocolMismatchTransactionData
	}
	return nil
}

func (x *IInventoryTransactionData) GetProtocolNormalTransactionData() *NormalTransactionData {
	if x, ok := x.GetTransactionData().(*IInventoryTransactionData_ProtocolNormalTransactionData); ok {
		return x.ProtocolNormalTransactionData
	}
	return nil
}

func (x *IInventoryTransactionData) GetProtocolReleaseItemTransactionData() *ReleaseItemTransactionData {
	if x, ok := x.GetTransactionData().(*IInventoryTransactionData_ProtocolReleaseItemTransactionData); ok {
		return x.ProtocolReleaseItemTransactionData
	}
	return nil
}

func (x *IInventoryTransactionData) GetProtocolUseItemOnEntityTransactionData() *UseItemOnEntityTransactionData {
	if x, ok := x.GetTransactionData().(*IInventoryTransactionData_ProtocolUseItemOnEntityTransactionData); ok {
		return x.ProtocolUseItemOnEntityTransactionData
	}
	return nil
}

func (x *IInventoryTransactionData) GetProtocolUseItemTransactionData() *UseItemTransactionData {
	if x, ok := x.GetTransactionData().(*IInventoryTransactionData_ProtocolUseItemTransactionData); ok {
		return x.ProtocolUseItemTransactionData
	}
	return nil
}

type isIInventoryTransactionData_TransactionData interface {
	isIInventoryTransactionData_TransactionData()
}

type IInventoryTransactionData_ProtocolMismatchTransactionData struct {
	ProtocolMismatchTransactionData *MismatchTransactionData `protobuf:"bytes,1,opt,name=protocol_mismatch_transaction_data,json=protocolMismatchTransactionData,proto3,oneof"`
}

type IInventoryTransactionData_ProtocolNormalTransactionData struct {
	ProtocolNormalTransactionData *NormalTransactionData `protobuf:"bytes,2,opt,name=protocol_normal_transaction_data,json=protocolNormalTransactionData,proto3,oneof"`
}

type IInventoryTransactionData_ProtocolReleaseItemTransactionData struct {
	ProtocolReleaseItemTransactionData *ReleaseItemTransactionData `protobuf:"bytes,3,opt,name=protocol_release_item_transaction_data,json=protocolReleaseItemTransactionData,proto3,oneof"`
}

type IInventoryTransactionData_ProtocolUseItemOnEntityTransactionData struct {
	ProtocolUseItemOnEntityTransactionData *UseItemOnEntityTransactionData `protobuf:"bytes,4,opt,name=protocol_use_item_on_entity_transaction_data,json=protocolUseItemOnEntityTransactionData,proto3,oneof"`
}

type IInventoryTransactionData_ProtocolUseItemTransactionData struct {
	ProtocolUseItemTransactionData *UseItemTransactionData `protobuf:"bytes,5,opt,name=protocol_use_item_transaction_data,json=protocolUseItemTransactionData,proto3,oneof"`
}

func (*IInventoryTransactionData_ProtocolMismatchTransactionData) isIInventoryTransactionData_TransactionData() {
}

func (*IInventoryTransactionData_ProtocolNormalTransactionData) isIInventoryTransactionData_TransactionData() {
}

func (*IInventoryTransactionData_ProtocolReleaseItemTransactionData) isIInventoryTransactionData_TransactionData() {
}

func (*IInventoryTransactionData_ProtocolUseItemOnEntityTransactionData) isIInventoryTransactionData_TransactionData() {
}

func (*IInventoryTransactionData_ProtocolUseItemTransactionData) isIInventoryTransactionData_TransactionData() {
}

type IRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Recipes:
	//	*IRecipe_ProtocolFurnaceDataRecipe
	//	*IRecipe_ProtocolFurnaceRecipe
	//	*IRecipe_ProtocolMultiRecipe
	//	*IRecipe_ProtocolShapedChemistryRecipe
	//	*IRecipe_ProtocolShapedRecipe
	//	*IRecipe_ProtocolShapelessChemistryRecipe
	//	*IRecipe_ProtocolShapelessRecipe
	//	*IRecipe_ProtocolShulkerBoxRecipe
	Recipes isIRecipe_Recipes `protobuf_oneof:"recipes"`
}

func (x *IRecipe) Reset() {
	*x = IRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRecipe) ProtoMessage() {}

func (x *IRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRecipe.ProtoReflect.Descriptor instead.
func (*IRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{48}
}

func (m *IRecipe) GetRecipes() isIRecipe_Recipes {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (x *IRecipe) GetProtocolFurnaceDataRecipe() *FurnaceDataRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolFurnaceDataRecipe); ok {
		return x.ProtocolFurnaceDataRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolFurnaceRecipe() *FurnaceRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolFurnaceRecipe); ok {
		return x.ProtocolFurnaceRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolMultiRecipe() *MultiRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolMultiRecipe); ok {
		return x.ProtocolMultiRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolShapedChemistryRecipe() *ShapedChemistryRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolShapedChemistryRecipe); ok {
		return x.ProtocolShapedChemistryRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolShapedRecipe() *ShapedRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolShapedRecipe); ok {
		return x.ProtocolShapedRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolShapelessChemistryRecipe() *ShapelessChemistryRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolShapelessChemistryRecipe); ok {
		return x.ProtocolShapelessChemistryRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolShapelessRecipe() *ShapelessRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolShapelessRecipe); ok {
		return x.ProtocolShapelessRecipe
	}
	return nil
}

func (x *IRecipe) GetProtocolShulkerBoxRecipe() *ShulkerBoxRecipe {
	if x, ok := x.GetRecipes().(*IRecipe_ProtocolShulkerBoxRecipe); ok {
		return x.ProtocolShulkerBoxRecipe
	}
	return nil
}

type isIRecipe_Recipes interface {
	isIRecipe_Recipes()
}

type IRecipe_ProtocolFurnaceDataRecipe struct {
	ProtocolFurnaceDataRecipe *FurnaceDataRecipe `protobuf:"bytes,1,opt,name=protocol_furnace_data_recipe,json=protocolFurnaceDataRecipe,proto3,oneof"`
}

type IRecipe_ProtocolFurnaceRecipe struct {
	ProtocolFurnaceRecipe *FurnaceRecipe `protobuf:"bytes,2,opt,name=protocol_furnace_recipe,json=protocolFurnaceRecipe,proto3,oneof"`
}

type IRecipe_ProtocolMultiRecipe struct {
	ProtocolMultiRecipe *MultiRecipe `protobuf:"bytes,3,opt,name=protocol_multi_recipe,json=protocolMultiRecipe,proto3,oneof"`
}

type IRecipe_ProtocolShapedChemistryRecipe struct {
	ProtocolShapedChemistryRecipe *ShapedChemistryRecipe `protobuf:"bytes,4,opt,name=protocol_shaped_chemistry_recipe,json=protocolShapedChemistryRecipe,proto3,oneof"`
}

type IRecipe_ProtocolShapedRecipe struct {
	ProtocolShapedRecipe *ShapedRecipe `protobuf:"bytes,5,opt,name=protocol_shaped_recipe,json=protocolShapedRecipe,proto3,oneof"`
}

type IRecipe_ProtocolShapelessChemistryRecipe struct {
	ProtocolShapelessChemistryRecipe *ShapelessChemistryRecipe `protobuf:"bytes,6,opt,name=protocol_shapeless_chemistry_recipe,json=protocolShapelessChemistryRecipe,proto3,oneof"`
}

type IRecipe_ProtocolShapelessRecipe struct {
	ProtocolShapelessRecipe *ShapelessRecipe `protobuf:"bytes,7,opt,name=protocol_shapeless_recipe,json=protocolShapelessRecipe,proto3,oneof"`
}

type IRecipe_ProtocolShulkerBoxRecipe struct {
	ProtocolShulkerBoxRecipe *ShulkerBoxRecipe `protobuf:"bytes,8,opt,name=protocol_shulker_box_recipe,json=protocolShulkerBoxRecipe,proto3,oneof"`
}

func (*IRecipe_ProtocolFurnaceDataRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolFurnaceRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolMultiRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolShapedChemistryRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolShapedRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolShapelessChemistryRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolShapelessRecipe) isIRecipe_Recipes() {}

func (*IRecipe_ProtocolShulkerBoxRecipe) isIRecipe_Recipes() {}

type IStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Actions:
	//	*IStackRequestAction_ProtocolAutoCraftRecipeStackRequestAction
	//	*IStackRequestAction_ProtocolBeaconPaymentStackRequestAction
	//	*IStackRequestAction_ProtocolConsumeStackRequestAction
	//	*IStackRequestAction_ProtocolCraftCreativeStackRequestAction
	//	*IStackRequestAction_ProtocolCraftGrindstoneRecipeStackRequestAction
	//	*IStackRequestAction_ProtocolCraftLoomRecipeStackRequestAction
	//	*IStackRequestAction_ProtocolCraftNonImplementedStackRequestAction
	//	*IStackRequestAction_ProtocolCraftRecipeOptionalStackRequestAction
	//	*IStackRequestAction_ProtocolCraftRecipeStackRequestAction
	//	*IStackRequestAction_ProtocolCraftResultsDeprecatedStackRequestAction
	//	*IStackRequestAction_ProtocolCreateStackRequestAction
	//	*IStackRequestAction_ProtocolDestroyStackRequestAction
	//	*IStackRequestAction_ProtocolDropStackRequestAction
	//	*IStackRequestAction_ProtocolLabTableCombineStackRequestAction
	//	*IStackRequestAction_ProtocolMineBlockStackRequestAction
	//	*IStackRequestAction_ProtocolPlaceInContainerStackRequestAction
	//	*IStackRequestAction_ProtocolPlaceStackRequestAction
	//	*IStackRequestAction_ProtocolSwapStackRequestAction
	//	*IStackRequestAction_ProtocolTakeOutContainerStackRequestAction
	//	*IStackRequestAction_ProtocolTakeStackRequestAction
	Actions isIStackRequestAction_Actions `protobuf_oneof:"actions"`
}

func (x *IStackRequestAction) Reset() {
	*x = IStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IStackRequestAction) ProtoMessage() {}

func (x *IStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IStackRequestAction.ProtoReflect.Descriptor instead.
func (*IStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{49}
}

func (m *IStackRequestAction) GetActions() isIStackRequestAction_Actions {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolAutoCraftRecipeStackRequestAction() *AutoCraftRecipeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolAutoCraftRecipeStackRequestAction); ok {
		return x.ProtocolAutoCraftRecipeStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolBeaconPaymentStackRequestAction() *BeaconPaymentStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolBeaconPaymentStackRequestAction); ok {
		return x.ProtocolBeaconPaymentStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolConsumeStackRequestAction() *ConsumeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolConsumeStackRequestAction); ok {
		return x.ProtocolConsumeStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftCreativeStackRequestAction() *CraftCreativeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftCreativeStackRequestAction); ok {
		return x.ProtocolCraftCreativeStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftGrindstoneRecipeStackRequestAction() *CraftGrindstoneRecipeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftGrindstoneRecipeStackRequestAction); ok {
		return x.ProtocolCraftGrindstoneRecipeStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftLoomRecipeStackRequestAction() *CraftLoomRecipeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftLoomRecipeStackRequestAction); ok {
		return x.ProtocolCraftLoomRecipeStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftNonImplementedStackRequestAction() *CraftNonImplementedStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftNonImplementedStackRequestAction); ok {
		return x.ProtocolCraftNonImplementedStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftRecipeOptionalStackRequestAction() *CraftRecipeOptionalStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftRecipeOptionalStackRequestAction); ok {
		return x.ProtocolCraftRecipeOptionalStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftRecipeStackRequestAction() *CraftRecipeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftRecipeStackRequestAction); ok {
		return x.ProtocolCraftRecipeStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCraftResultsDeprecatedStackRequestAction() *CraftResultsDeprecatedStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCraftResultsDeprecatedStackRequestAction); ok {
		return x.ProtocolCraftResultsDeprecatedStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolCreateStackRequestAction() *CreateStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolCreateStackRequestAction); ok {
		return x.ProtocolCreateStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolDestroyStackRequestAction() *DestroyStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolDestroyStackRequestAction); ok {
		return x.ProtocolDestroyStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolDropStackRequestAction() *DropStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolDropStackRequestAction); ok {
		return x.ProtocolDropStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolLabTableCombineStackRequestAction() *LabTableCombineStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolLabTableCombineStackRequestAction); ok {
		return x.ProtocolLabTableCombineStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolMineBlockStackRequestAction() *MineBlockStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolMineBlockStackRequestAction); ok {
		return x.ProtocolMineBlockStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolPlaceInContainerStackRequestAction() *PlaceInContainerStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolPlaceInContainerStackRequestAction); ok {
		return x.ProtocolPlaceInContainerStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolPlaceStackRequestAction() *PlaceStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolPlaceStackRequestAction); ok {
		return x.ProtocolPlaceStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolSwapStackRequestAction() *SwapStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolSwapStackRequestAction); ok {
		return x.ProtocolSwapStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolTakeOutContainerStackRequestAction() *TakeOutContainerStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolTakeOutContainerStackRequestAction); ok {
		return x.ProtocolTakeOutContainerStackRequestAction
	}
	return nil
}

func (x *IStackRequestAction) GetProtocolTakeStackRequestAction() *TakeStackRequestAction {
	if x, ok := x.GetActions().(*IStackRequestAction_ProtocolTakeStackRequestAction); ok {
		return x.ProtocolTakeStackRequestAction
	}
	return nil
}

type isIStackRequestAction_Actions interface {
	isIStackRequestAction_Actions()
}

type IStackRequestAction_ProtocolAutoCraftRecipeStackRequestAction struct {
	ProtocolAutoCraftRecipeStackRequestAction *AutoCraftRecipeStackRequestAction `protobuf:"bytes,1,opt,name=protocol_auto_craft_recipe_stack_request_action,json=protocolAutoCraftRecipeStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolBeaconPaymentStackRequestAction struct {
	ProtocolBeaconPaymentStackRequestAction *BeaconPaymentStackRequestAction `protobuf:"bytes,2,opt,name=protocol_beacon_payment_stack_request_action,json=protocolBeaconPaymentStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolConsumeStackRequestAction struct {
	ProtocolConsumeStackRequestAction *ConsumeStackRequestAction `protobuf:"bytes,3,opt,name=protocol_consume_stack_request_action,json=protocolConsumeStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftCreativeStackRequestAction struct {
	ProtocolCraftCreativeStackRequestAction *CraftCreativeStackRequestAction `protobuf:"bytes,4,opt,name=protocol_craft_creative_stack_request_action,json=protocolCraftCreativeStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftGrindstoneRecipeStackRequestAction struct {
	ProtocolCraftGrindstoneRecipeStackRequestAction *CraftGrindstoneRecipeStackRequestAction `protobuf:"bytes,5,opt,name=protocol_craft_grindstone_recipe_stack_request_action,json=protocolCraftGrindstoneRecipeStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftLoomRecipeStackRequestAction struct {
	ProtocolCraftLoomRecipeStackRequestAction *CraftLoomRecipeStackRequestAction `protobuf:"bytes,6,opt,name=protocol_craft_loom_recipe_stack_request_action,json=protocolCraftLoomRecipeStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftNonImplementedStackRequestAction struct {
	ProtocolCraftNonImplementedStackRequestAction *CraftNonImplementedStackRequestAction `protobuf:"bytes,7,opt,name=protocol_craft_non_implemented_stack_request_action,json=protocolCraftNonImplementedStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftRecipeOptionalStackRequestAction struct {
	ProtocolCraftRecipeOptionalStackRequestAction *CraftRecipeOptionalStackRequestAction `protobuf:"bytes,8,opt,name=protocol_craft_recipe_optional_stack_request_action,json=protocolCraftRecipeOptionalStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftRecipeStackRequestAction struct {
	ProtocolCraftRecipeStackRequestAction *CraftRecipeStackRequestAction `protobuf:"bytes,9,opt,name=protocol_craft_recipe_stack_request_action,json=protocolCraftRecipeStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCraftResultsDeprecatedStackRequestAction struct {
	ProtocolCraftResultsDeprecatedStackRequestAction *CraftResultsDeprecatedStackRequestAction `protobuf:"bytes,10,opt,name=protocol_craft_results_deprecated_stack_request_action,json=protocolCraftResultsDeprecatedStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolCreateStackRequestAction struct {
	ProtocolCreateStackRequestAction *CreateStackRequestAction `protobuf:"bytes,11,opt,name=protocol_create_stack_request_action,json=protocolCreateStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolDestroyStackRequestAction struct {
	ProtocolDestroyStackRequestAction *DestroyStackRequestAction `protobuf:"bytes,12,opt,name=protocol_destroy_stack_request_action,json=protocolDestroyStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolDropStackRequestAction struct {
	ProtocolDropStackRequestAction *DropStackRequestAction `protobuf:"bytes,13,opt,name=protocol_drop_stack_request_action,json=protocolDropStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolLabTableCombineStackRequestAction struct {
	ProtocolLabTableCombineStackRequestAction *LabTableCombineStackRequestAction `protobuf:"bytes,14,opt,name=protocol_lab_table_combine_stack_request_action,json=protocolLabTableCombineStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolMineBlockStackRequestAction struct {
	ProtocolMineBlockStackRequestAction *MineBlockStackRequestAction `protobuf:"bytes,15,opt,name=protocol_mine_block_stack_request_action,json=protocolMineBlockStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolPlaceInContainerStackRequestAction struct {
	ProtocolPlaceInContainerStackRequestAction *PlaceInContainerStackRequestAction `protobuf:"bytes,16,opt,name=protocol_place_in_container_stack_request_action,json=protocolPlaceInContainerStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolPlaceStackRequestAction struct {
	ProtocolPlaceStackRequestAction *PlaceStackRequestAction `protobuf:"bytes,17,opt,name=protocol_place_stack_request_action,json=protocolPlaceStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolSwapStackRequestAction struct {
	ProtocolSwapStackRequestAction *SwapStackRequestAction `protobuf:"bytes,18,opt,name=protocol_swap_stack_request_action,json=protocolSwapStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolTakeOutContainerStackRequestAction struct {
	ProtocolTakeOutContainerStackRequestAction *TakeOutContainerStackRequestAction `protobuf:"bytes,19,opt,name=protocol_take_out_container_stack_request_action,json=protocolTakeOutContainerStackRequestAction,proto3,oneof"`
}

type IStackRequestAction_ProtocolTakeStackRequestAction struct {
	ProtocolTakeStackRequestAction *TakeStackRequestAction `protobuf:"bytes,20,opt,name=protocol_take_stack_request_action,json=protocolTakeStackRequestAction,proto3,oneof"`
}

func (*IStackRequestAction_ProtocolAutoCraftRecipeStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolBeaconPaymentStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolConsumeStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolCraftCreativeStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolCraftGrindstoneRecipeStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolCraftLoomRecipeStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolCraftNonImplementedStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolCraftRecipeOptionalStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolCraftRecipeStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolCraftResultsDeprecatedStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolCreateStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolDestroyStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolDropStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolLabTableCombineStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolMineBlockStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolPlaceInContainerStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolPlaceStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolSwapStackRequestAction) isIStackRequestAction_Actions() {}

func (*IStackRequestAction_ProtocolTakeOutContainerStackRequestAction) isIStackRequestAction_Actions() {
}

func (*IStackRequestAction_ProtocolTakeStackRequestAction) isIStackRequestAction_Actions() {}

type InventoryAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType    uint32        `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	WindowId      int32         `protobuf:"varint,2,opt,name=window_id,json=windowId,proto3" json:"window_id,omitempty"`
	SourceFlags   uint32        `protobuf:"varint,3,opt,name=source_flags,json=sourceFlags,proto3" json:"source_flags,omitempty"`
	InventorySlot uint32        `protobuf:"varint,4,opt,name=inventory_slot,json=inventorySlot,proto3" json:"inventory_slot,omitempty"`
	OldItem       *ItemInstance `protobuf:"bytes,5,opt,name=old_item,json=oldItem,proto3" json:"old_item,omitempty"`
	NewItem       *ItemInstance `protobuf:"bytes,6,opt,name=new_item,json=newItem,proto3" json:"new_item,omitempty"`
}

func (x *InventoryAction) Reset() {
	*x = InventoryAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryAction) ProtoMessage() {}

func (x *InventoryAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryAction.ProtoReflect.Descriptor instead.
func (*InventoryAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{50}
}

func (x *InventoryAction) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *InventoryAction) GetWindowId() int32 {
	if x != nil {
		return x.WindowId
	}
	return 0
}

func (x *InventoryAction) GetSourceFlags() uint32 {
	if x != nil {
		return x.SourceFlags
	}
	return 0
}

func (x *InventoryAction) GetInventorySlot() uint32 {
	if x != nil {
		return x.InventorySlot
	}
	return 0
}

func (x *InventoryAction) GetOldItem() *ItemInstance {
	if x != nil {
		return x.OldItem
	}
	return nil
}

func (x *InventoryAction) GetNewItem() *ItemInstance {
	if x != nil {
		return x.NewItem
	}
	return nil
}

type ItemComponentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data map[string]*anypb.Any `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ItemComponentEntry) Reset() {
	*x = ItemComponentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemComponentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemComponentEntry) ProtoMessage() {}

func (x *ItemComponentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemComponentEntry.ProtoReflect.Descriptor instead.
func (*ItemComponentEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{51}
}

func (x *ItemComponentEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemComponentEntry) GetData() map[string]*anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ItemEnchantments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot         int32                `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Enchantments *EnchantmentInstance `protobuf:"bytes,2,opt,name=enchantments,proto3" json:"enchantments,omitempty"`
}

func (x *ItemEnchantments) Reset() {
	*x = ItemEnchantments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemEnchantments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemEnchantments) ProtoMessage() {}

func (x *ItemEnchantments) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemEnchantments.ProtoReflect.Descriptor instead.
func (*ItemEnchantments) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{52}
}

func (x *ItemEnchantments) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ItemEnchantments) GetEnchantments() *EnchantmentInstance {
	if x != nil {
		return x.Enchantments
	}
	return nil
}

type ItemEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RuntimeId      int32  `protobuf:"varint,2,opt,name=runtime_id,json=runtimeId,proto3" json:"runtime_id,omitempty"`
	ComponentBased bool   `protobuf:"varint,3,opt,name=component_based,json=componentBased,proto3" json:"component_based,omitempty"`
}

func (x *ItemEntry) Reset() {
	*x = ItemEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemEntry) ProtoMessage() {}

func (x *ItemEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemEntry.ProtoReflect.Descriptor instead.
func (*ItemEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{53}
}

func (x *ItemEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemEntry) GetRuntimeId() int32 {
	if x != nil {
		return x.RuntimeId
	}
	return 0
}

func (x *ItemEntry) GetComponentBased() bool {
	if x != nil {
		return x.ComponentBased
	}
	return false
}

type ItemInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackNetworkId int32      `protobuf:"varint,1,opt,name=stack_network_id,json=stackNetworkId,proto3" json:"stack_network_id,omitempty"`
	Stack          *ItemStack `protobuf:"bytes,2,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *ItemInstance) Reset() {
	*x = ItemInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInstance) ProtoMessage() {}

func (x *ItemInstance) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInstance.ProtoReflect.Descriptor instead.
func (*ItemInstance) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{54}
}

func (x *ItemInstance) GetStackNetworkId() int32 {
	if x != nil {
		return x.StackNetworkId
	}
	return 0
}

func (x *ItemInstance) GetStack() *ItemStack {
	if x != nil {
		return x.Stack
	}
	return nil
}

type ItemStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType       *ItemType             `protobuf:"bytes,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	BlockRuntimeId int32                 `protobuf:"varint,2,opt,name=block_runtime_id,json=blockRuntimeId,proto3" json:"block_runtime_id,omitempty"`
	Count          uint32                `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	NbtData        map[string]*anypb.Any `protobuf:"bytes,4,rep,name=nbt_data,json=nbtData,proto3" json:"nbt_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CanBePlacedOn  []string              `protobuf:"bytes,5,rep,name=can_be_placed_on,json=canBePlacedOn,proto3" json:"can_be_placed_on,omitempty"`
	CanBreak       []string              `protobuf:"bytes,6,rep,name=can_break,json=canBreak,proto3" json:"can_break,omitempty"`
	HasNetworkId   bool                  `protobuf:"varint,7,opt,name=has_network_id,json=hasNetworkId,proto3" json:"has_network_id,omitempty"`
}

func (x *ItemStack) Reset() {
	*x = ItemStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemStack) ProtoMessage() {}

func (x *ItemStack) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemStack.ProtoReflect.Descriptor instead.
func (*ItemStack) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{55}
}

func (x *ItemStack) GetItemType() *ItemType {
	if x != nil {
		return x.ItemType
	}
	return nil
}

func (x *ItemStack) GetBlockRuntimeId() int32 {
	if x != nil {
		return x.BlockRuntimeId
	}
	return 0
}

func (x *ItemStack) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ItemStack) GetNbtData() map[string]*anypb.Any {
	if x != nil {
		return x.NbtData
	}
	return nil
}

func (x *ItemStack) GetCanBePlacedOn() []string {
	if x != nil {
		return x.CanBePlacedOn
	}
	return nil
}

func (x *ItemStack) GetCanBreak() []string {
	if x != nil {
		return x.CanBreak
	}
	return nil
}

func (x *ItemStack) GetHasNetworkId() bool {
	if x != nil {
		return x.HasNetworkId
	}
	return false
}

type ItemStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     int32                  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Actions       []*IStackRequestAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	FilterStrings []string               `protobuf:"bytes,3,rep,name=filter_strings,json=filterStrings,proto3" json:"filter_strings,omitempty"`
}

func (x *ItemStackRequest) Reset() {
	*x = ItemStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemStackRequest) ProtoMessage() {}

func (x *ItemStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemStackRequest.ProtoReflect.Descriptor instead.
func (*ItemStackRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{56}
}

func (x *ItemStackRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ItemStackRequest) GetActions() []*IStackRequestAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ItemStackRequest) GetFilterStrings() []string {
	if x != nil {
		return x.FilterStrings
	}
	return nil
}

type ItemStackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        uint32                        `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestId     int32                         `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ContainerInfo []*StackResponseContainerInfo `protobuf:"bytes,3,rep,name=container_info,json=containerInfo,proto3" json:"container_info,omitempty"`
}

func (x *ItemStackResponse) Reset() {
	*x = ItemStackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemStackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemStackResponse) ProtoMessage() {}

func (x *ItemStackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemStackResponse.ProtoReflect.Descriptor instead.
func (*ItemStackResponse) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{57}
}

func (x *ItemStackResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ItemStackResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ItemStackResponse) GetContainerInfo() []*StackResponseContainerInfo {
	if x != nil {
		return x.ContainerInfo
	}
	return nil
}

type ItemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId     int32  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MetadataValue uint32 `protobuf:"varint,2,opt,name=metadata_value,json=metadataValue,proto3" json:"metadata_value,omitempty"`
}

func (x *ItemType) Reset() {
	*x = ItemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemType) ProtoMessage() {}

func (x *ItemType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemType.ProtoReflect.Descriptor instead.
func (*ItemType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{58}
}

func (x *ItemType) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *ItemType) GetMetadataValue() uint32 {
	if x != nil {
		return x.MetadataValue
	}
	return 0
}

type LabTableCombineStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LabTableCombineStackRequestAction) Reset() {
	*x = LabTableCombineStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabTableCombineStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabTableCombineStackRequestAction) ProtoMessage() {}

func (x *LabTableCombineStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabTableCombineStackRequestAction.ProtoReflect.Descriptor instead.
func (*LabTableCombineStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{59}
}

type LegacySetItemSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId uint32   `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Slots       []uint32 `protobuf:"varint,2,rep,packed,name=slots,proto3" json:"slots,omitempty"`
}

func (x *LegacySetItemSlot) Reset() {
	*x = LegacySetItemSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacySetItemSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacySetItemSlot) ProtoMessage() {}

func (x *LegacySetItemSlot) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacySetItemSlot.ProtoReflect.Descriptor instead.
func (*LegacySetItemSlot) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{60}
}

func (x *LegacySetItemSlot) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *LegacySetItemSlot) GetSlots() []uint32 {
	if x != nil {
		return x.Slots
	}
	return nil
}

type MapDecoration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Rotation uint32 `protobuf:"varint,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	X        uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y        uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	Label    string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Colour   *RGBA  `protobuf:"bytes,6,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *MapDecoration) Reset() {
	*x = MapDecoration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapDecoration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapDecoration) ProtoMessage() {}

func (x *MapDecoration) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapDecoration.ProtoReflect.Descriptor instead.
func (*MapDecoration) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{61}
}

func (x *MapDecoration) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MapDecoration) GetRotation() uint32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *MapDecoration) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapDecoration) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapDecoration) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *MapDecoration) GetColour() *RGBA {
	if x != nil {
		return x.Colour
	}
	return nil
}

type MapTrackedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           int32     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	EntityUniqueId int64     `protobuf:"varint,2,opt,name=entity_unique_id,json=entityUniqueId,proto3" json:"entity_unique_id,omitempty"`
	BlockPosition  *Vector3I `protobuf:"bytes,3,opt,name=block_position,json=blockPosition,proto3" json:"block_position,omitempty"`
}

func (x *MapTrackedObject) Reset() {
	*x = MapTrackedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTrackedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTrackedObject) ProtoMessage() {}

func (x *MapTrackedObject) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTrackedObject.ProtoReflect.Descriptor instead.
func (*MapTrackedObject) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{62}
}

func (x *MapTrackedObject) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MapTrackedObject) GetEntityUniqueId() int64 {
	if x != nil {
		return x.EntityUniqueId
	}
	return 0
}

func (x *MapTrackedObject) GetBlockPosition() *Vector3I {
	if x != nil {
		return x.BlockPosition
	}
	return nil
}

type MaterialReducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputItem *ItemType                `protobuf:"bytes,1,opt,name=input_item,json=inputItem,proto3" json:"input_item,omitempty"`
	Outputs   []*MaterialReducerOutput `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *MaterialReducer) Reset() {
	*x = MaterialReducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialReducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialReducer) ProtoMessage() {}

func (x *MaterialReducer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialReducer.ProtoReflect.Descriptor instead.
func (*MaterialReducer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{63}
}

func (x *MaterialReducer) GetInputItem() *ItemType {
	if x != nil {
		return x.InputItem
	}
	return nil
}

func (x *MaterialReducer) GetOutputs() []*MaterialReducerOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type MaterialReducerOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId int32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Count     int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MaterialReducerOutput) Reset() {
	*x = MaterialReducerOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialReducerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialReducerOutput) ProtoMessage() {}

func (x *MaterialReducerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialReducerOutput.ProtoReflect.Descriptor instead.
func (*MaterialReducerOutput) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{64}
}

func (x *MaterialReducerOutput) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *MaterialReducerOutput) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MineBlockStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HotbarSlot          int32 `protobuf:"varint,1,opt,name=hotbar_slot,json=hotbarSlot,proto3" json:"hotbar_slot,omitempty"`
	PredictedDurability int32 `protobuf:"varint,2,opt,name=predicted_durability,json=predictedDurability,proto3" json:"predicted_durability,omitempty"`
	StackNetworkId      int32 `protobuf:"varint,3,opt,name=stack_network_id,json=stackNetworkId,proto3" json:"stack_network_id,omitempty"`
}

func (x *MineBlockStackRequestAction) Reset() {
	*x = MineBlockStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MineBlockStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MineBlockStackRequestAction) ProtoMessage() {}

func (x *MineBlockStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MineBlockStackRequestAction.ProtoReflect.Descriptor instead.
func (*MineBlockStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{65}
}

func (x *MineBlockStackRequestAction) GetHotbarSlot() int32 {
	if x != nil {
		return x.HotbarSlot
	}
	return 0
}

func (x *MineBlockStackRequestAction) GetPredictedDurability() int32 {
	if x != nil {
		return x.PredictedDurability
	}
	return 0
}

func (x *MineBlockStackRequestAction) GetStackNetworkId() int32 {
	if x != nil {
		return x.StackNetworkId
	}
	return 0
}

type MismatchTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MismatchTransactionData) Reset() {
	*x = MismatchTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MismatchTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MismatchTransactionData) ProtoMessage() {}

func (x *MismatchTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MismatchTransactionData.ProtoReflect.Descriptor instead.
func (*MismatchTransactionData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{66}
}

type MobBornEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType int32  `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	Variant    int32  `protobuf:"varint,2,opt,name=variant,proto3" json:"variant,omitempty"`
	Colour     uint32 `protobuf:"varint,3,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *MobBornEventData) Reset() {
	*x = MobBornEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobBornEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobBornEventData) ProtoMessage() {}

func (x *MobBornEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobBornEventData.ProtoReflect.Descriptor instead.
func (*MobBornEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{67}
}

func (x *MobBornEventData) GetEntityType() int32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *MobBornEventData) GetVariant() int32 {
	if x != nil {
		return x.Variant
	}
	return 0
}

func (x *MobBornEventData) GetColour() uint32 {
	if x != nil {
		return x.Colour
	}
	return 0
}

type MobKilledEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillerEntityUniqueId int64  `protobuf:"varint,1,opt,name=killer_entity_unique_id,json=killerEntityUniqueId,proto3" json:"killer_entity_unique_id,omitempty"`
	VictimEntityUniqueId int64  `protobuf:"varint,2,opt,name=victim_entity_unique_id,json=victimEntityUniqueId,proto3" json:"victim_entity_unique_id,omitempty"`
	KillerEntityType     int32  `protobuf:"varint,3,opt,name=killer_entity_type,json=killerEntityType,proto3" json:"killer_entity_type,omitempty"`
	EntityDamageCause    int32  `protobuf:"varint,4,opt,name=entity_damage_cause,json=entityDamageCause,proto3" json:"entity_damage_cause,omitempty"`
	VillagerTradeTier    int32  `protobuf:"varint,5,opt,name=villager_trade_tier,json=villagerTradeTier,proto3" json:"villager_trade_tier,omitempty"`
	VillagerDisplayName  string `protobuf:"bytes,6,opt,name=villager_display_name,json=villagerDisplayName,proto3" json:"villager_display_name,omitempty"`
}

func (x *MobKilledEventData) Reset() {
	*x = MobKilledEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobKilledEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobKilledEventData) ProtoMessage() {}

func (x *MobKilledEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobKilledEventData.ProtoReflect.Descriptor instead.
func (*MobKilledEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{68}
}

func (x *MobKilledEventData) GetKillerEntityUniqueId() int64 {
	if x != nil {
		return x.KillerEntityUniqueId
	}
	return 0
}

func (x *MobKilledEventData) GetVictimEntityUniqueId() int64 {
	if x != nil {
		return x.VictimEntityUniqueId
	}
	return 0
}

func (x *MobKilledEventData) GetKillerEntityType() int32 {
	if x != nil {
		return x.KillerEntityType
	}
	return 0
}

func (x *MobKilledEventData) GetEntityDamageCause() int32 {
	if x != nil {
		return x.EntityDamageCause
	}
	return 0
}

func (x *MobKilledEventData) GetVillagerTradeTier() int32 {
	if x != nil {
		return x.VillagerTradeTier
	}
	return 0
}

func (x *MobKilledEventData) GetVillagerDisplayName() string {
	if x != nil {
		return x.VillagerDisplayName
	}
	return ""
}

type MovementAnomalyEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType            uint32  `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	CheatingScore        float32 `protobuf:"fixed32,2,opt,name=cheating_score,json=cheatingScore,proto3" json:"cheating_score,omitempty"`
	AveragePositionDelta float32 `protobuf:"fixed32,3,opt,name=average_position_delta,json=averagePositionDelta,proto3" json:"average_position_delta,omitempty"`
	TotalPositionDelta   float32 `protobuf:"fixed32,4,opt,name=total_position_delta,json=totalPositionDelta,proto3" json:"total_position_delta,omitempty"`
	MinPositionDelta     float32 `protobuf:"fixed32,5,opt,name=min_position_delta,json=minPositionDelta,proto3" json:"min_position_delta,omitempty"`
	MaxPositionDelta     float32 `protobuf:"fixed32,6,opt,name=max_position_delta,json=maxPositionDelta,proto3" json:"max_position_delta,omitempty"`
}

func (x *MovementAnomalyEventData) Reset() {
	*x = MovementAnomalyEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovementAnomalyEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovementAnomalyEventData) ProtoMessage() {}

func (x *MovementAnomalyEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovementAnomalyEventData.ProtoReflect.Descriptor instead.
func (*MovementAnomalyEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{69}
}

func (x *MovementAnomalyEventData) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *MovementAnomalyEventData) GetCheatingScore() float32 {
	if x != nil {
		return x.CheatingScore
	}
	return 0
}

func (x *MovementAnomalyEventData) GetAveragePositionDelta() float32 {
	if x != nil {
		return x.AveragePositionDelta
	}
	return 0
}

func (x *MovementAnomalyEventData) GetTotalPositionDelta() float32 {
	if x != nil {
		return x.TotalPositionDelta
	}
	return 0
}

func (x *MovementAnomalyEventData) GetMinPositionDelta() float32 {
	if x != nil {
		return x.MinPositionDelta
	}
	return 0
}

func (x *MovementAnomalyEventData) GetMaxPositionDelta() float32 {
	if x != nil {
		return x.MaxPositionDelta
	}
	return 0
}

type MovementCorrectedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionDelta     float32 `protobuf:"fixed32,1,opt,name=position_delta,json=positionDelta,proto3" json:"position_delta,omitempty"`
	CheatingScore     float32 `protobuf:"fixed32,2,opt,name=cheating_score,json=cheatingScore,proto3" json:"cheating_score,omitempty"`
	ScoreThreshold    float32 `protobuf:"fixed32,3,opt,name=score_threshold,json=scoreThreshold,proto3" json:"score_threshold,omitempty"`
	DistanceThreshold float32 `protobuf:"fixed32,4,opt,name=distance_threshold,json=distanceThreshold,proto3" json:"distance_threshold,omitempty"`
	DurationThreshold int32   `protobuf:"varint,5,opt,name=duration_threshold,json=durationThreshold,proto3" json:"duration_threshold,omitempty"`
}

func (x *MovementCorrectedEventData) Reset() {
	*x = MovementCorrectedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovementCorrectedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovementCorrectedEventData) ProtoMessage() {}

func (x *MovementCorrectedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovementCorrectedEventData.ProtoReflect.Descriptor instead.
func (*MovementCorrectedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{70}
}

func (x *MovementCorrectedEventData) GetPositionDelta() float32 {
	if x != nil {
		return x.PositionDelta
	}
	return 0
}

func (x *MovementCorrectedEventData) GetCheatingScore() float32 {
	if x != nil {
		return x.CheatingScore
	}
	return 0
}

func (x *MovementCorrectedEventData) GetScoreThreshold() float32 {
	if x != nil {
		return x.ScoreThreshold
	}
	return 0
}

func (x *MovementCorrectedEventData) GetDistanceThreshold() float32 {
	if x != nil {
		return x.DistanceThreshold
	}
	return 0
}

func (x *MovementCorrectedEventData) GetDurationThreshold() int32 {
	if x != nil {
		return x.DurationThreshold
	}
	return 0
}

type MultiRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RecipeNetworkId uint32 `protobuf:"varint,2,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *MultiRecipe) Reset() {
	*x = MultiRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRecipe) ProtoMessage() {}

func (x *MultiRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRecipe.ProtoReflect.Descriptor instead.
func (*MultiRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{71}
}

func (x *MultiRecipe) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MultiRecipe) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type NormalTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NormalTransactionData) Reset() {
	*x = NormalTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalTransactionData) ProtoMessage() {}

func (x *NormalTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalTransactionData.ProtoReflect.Descriptor instead.
func (*NormalTransactionData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72}
}

type PatternRemovedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	AuxValue      int32 `protobuf:"varint,2,opt,name=aux_value,json=auxValue,proto3" json:"aux_value,omitempty"`
	PatternsSize  int32 `protobuf:"varint,3,opt,name=patterns_size,json=patternsSize,proto3" json:"patterns_size,omitempty"`
	PatternIndex  int32 `protobuf:"varint,4,opt,name=pattern_index,json=patternIndex,proto3" json:"pattern_index,omitempty"`
	PatternColour int32 `protobuf:"varint,5,opt,name=pattern_colour,json=patternColour,proto3" json:"pattern_colour,omitempty"`
}

func (x *PatternRemovedEventData) Reset() {
	*x = PatternRemovedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternRemovedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternRemovedEventData) ProtoMessage() {}

func (x *PatternRemovedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternRemovedEventData.ProtoReflect.Descriptor instead.
func (*PatternRemovedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{73}
}

func (x *PatternRemovedEventData) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PatternRemovedEventData) GetAuxValue() int32 {
	if x != nil {
		return x.AuxValue
	}
	return 0
}

func (x *PatternRemovedEventData) GetPatternsSize() int32 {
	if x != nil {
		return x.PatternsSize
	}
	return 0
}

func (x *PatternRemovedEventData) GetPatternIndex() int32 {
	if x != nil {
		return x.PatternIndex
	}
	return 0
}

func (x *PatternRemovedEventData) GetPatternColour() int32 {
	if x != nil {
		return x.PatternColour
	}
	return 0
}

type PersonaPiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PieceId   string `protobuf:"bytes,1,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`
	PieceType string `protobuf:"bytes,2,opt,name=piece_type,json=pieceType,proto3" json:"piece_type,omitempty"`
	PackId    string `protobuf:"bytes,3,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`
	Default   bool   `protobuf:"varint,4,opt,name=default,proto3" json:"default,omitempty"`
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *PersonaPiece) Reset() {
	*x = PersonaPiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonaPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonaPiece) ProtoMessage() {}

func (x *PersonaPiece) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonaPiece.ProtoReflect.Descriptor instead.
func (*PersonaPiece) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{74}
}

func (x *PersonaPiece) GetPieceId() string {
	if x != nil {
		return x.PieceId
	}
	return ""
}

func (x *PersonaPiece) GetPieceType() string {
	if x != nil {
		return x.PieceType
	}
	return ""
}

func (x *PersonaPiece) GetPackId() string {
	if x != nil {
		return x.PackId
	}
	return ""
}

func (x *PersonaPiece) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *PersonaPiece) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type PersonaPieceTintColour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PieceType string   `protobuf:"bytes,1,opt,name=piece_type,json=pieceType,proto3" json:"piece_type,omitempty"`
	Colours   []string `protobuf:"bytes,2,rep,name=colours,proto3" json:"colours,omitempty"`
}

func (x *PersonaPieceTintColour) Reset() {
	*x = PersonaPieceTintColour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonaPieceTintColour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonaPieceTintColour) ProtoMessage() {}

func (x *PersonaPieceTintColour) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonaPieceTintColour.ProtoReflect.Descriptor instead.
func (*PersonaPieceTintColour) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{75}
}

func (x *PersonaPieceTintColour) GetPieceType() string {
	if x != nil {
		return x.PieceType
	}
	return ""
}

func (x *PersonaPieceTintColour) GetColours() []string {
	if x != nil {
		return x.Colours
	}
	return nil
}

type PetDiedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KilledByOwner        bool  `protobuf:"varint,1,opt,name=killed_by_owner,json=killedByOwner,proto3" json:"killed_by_owner,omitempty"`
	KillerEntityUniqueId int64 `protobuf:"varint,2,opt,name=killer_entity_unique_id,json=killerEntityUniqueId,proto3" json:"killer_entity_unique_id,omitempty"`
	PetEntityUniqueId    int64 `protobuf:"varint,3,opt,name=pet_entity_unique_id,json=petEntityUniqueId,proto3" json:"pet_entity_unique_id,omitempty"`
	EntityDamageCause    int32 `protobuf:"varint,4,opt,name=entity_damage_cause,json=entityDamageCause,proto3" json:"entity_damage_cause,omitempty"`
	PetEntityType        int32 `protobuf:"varint,5,opt,name=pet_entity_type,json=petEntityType,proto3" json:"pet_entity_type,omitempty"`
}

func (x *PetDiedEventData) Reset() {
	*x = PetDiedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetDiedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetDiedEventData) ProtoMessage() {}

func (x *PetDiedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetDiedEventData.ProtoReflect.Descriptor instead.
func (*PetDiedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{76}
}

func (x *PetDiedEventData) GetKilledByOwner() bool {
	if x != nil {
		return x.KilledByOwner
	}
	return false
}

func (x *PetDiedEventData) GetKillerEntityUniqueId() int64 {
	if x != nil {
		return x.KillerEntityUniqueId
	}
	return 0
}

func (x *PetDiedEventData) GetPetEntityUniqueId() int64 {
	if x != nil {
		return x.PetEntityUniqueId
	}
	return 0
}

func (x *PetDiedEventData) GetEntityDamageCause() int32 {
	if x != nil {
		return x.EntityDamageCause
	}
	return 0
}

func (x *PetDiedEventData) GetPetEntityType() int32 {
	if x != nil {
		return x.PetEntityType
	}
	return 0
}

type PlaceInContainerStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferStackRequestAction *TransferStackRequestAction `protobuf:"bytes,1,opt,name=transfer_stack_request_action,json=transferStackRequestAction,proto3" json:"transfer_stack_request_action,omitempty"`
}

func (x *PlaceInContainerStackRequestAction) Reset() {
	*x = PlaceInContainerStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceInContainerStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceInContainerStackRequestAction) ProtoMessage() {}

func (x *PlaceInContainerStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceInContainerStackRequestAction.ProtoReflect.Descriptor instead.
func (*PlaceInContainerStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{77}
}

func (x *PlaceInContainerStackRequestAction) GetTransferStackRequestAction() *TransferStackRequestAction {
	if x != nil {
		return x.TransferStackRequestAction
	}
	return nil
}

type PlaceStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferStackRequestAction *TransferStackRequestAction `protobuf:"bytes,1,opt,name=transfer_stack_request_action,json=transferStackRequestAction,proto3" json:"transfer_stack_request_action,omitempty"`
}

func (x *PlaceStackRequestAction) Reset() {
	*x = PlaceStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceStackRequestAction) ProtoMessage() {}

func (x *PlaceStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceStackRequestAction.ProtoReflect.Descriptor instead.
func (*PlaceStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{78}
}

func (x *PlaceStackRequestAction) GetTransferStackRequestAction() *TransferStackRequestAction {
	if x != nil {
		return x.TransferStackRequestAction
	}
	return nil
}

type PlayerBlockAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   int32     `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	BlockPos *Vector3I `protobuf:"bytes,2,opt,name=block_pos,json=blockPos,proto3" json:"block_pos,omitempty"`
	Face     int32     `protobuf:"varint,3,opt,name=face,proto3" json:"face,omitempty"`
}

func (x *PlayerBlockAction) Reset() {
	*x = PlayerBlockAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBlockAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBlockAction) ProtoMessage() {}

func (x *PlayerBlockAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBlockAction.ProtoReflect.Descriptor instead.
func (*PlayerBlockAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{79}
}

func (x *PlayerBlockAction) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *PlayerBlockAction) GetBlockPos() *Vector3I {
	if x != nil {
		return x.BlockPos
	}
	return nil
}

func (x *PlayerBlockAction) GetFace() int32 {
	if x != nil {
		return x.Face
	}
	return 0
}

type PlayerDiedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerEntityId  int32 `protobuf:"varint,1,opt,name=attacker_entity_id,json=attackerEntityId,proto3" json:"attacker_entity_id,omitempty"`
	EntityDamageCause int32 `protobuf:"varint,2,opt,name=entity_damage_cause,json=entityDamageCause,proto3" json:"entity_damage_cause,omitempty"`
}

func (x *PlayerDiedEventData) Reset() {
	*x = PlayerDiedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDiedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDiedEventData) ProtoMessage() {}

func (x *PlayerDiedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDiedEventData.ProtoReflect.Descriptor instead.
func (*PlayerDiedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{80}
}

func (x *PlayerDiedEventData) GetAttackerEntityId() int32 {
	if x != nil {
		return x.AttackerEntityId
	}
	return 0
}

func (x *PlayerDiedEventData) GetEntityDamageCause() int32 {
	if x != nil {
		return x.EntityDamageCause
	}
	return 0
}

type PlayerListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	EntityUniqueId int64  `protobuf:"varint,2,opt,name=entity_unique_id,json=entityUniqueId,proto3" json:"entity_unique_id,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Xuid           string `protobuf:"bytes,4,opt,name=xuid,proto3" json:"xuid,omitempty"`
	PlatformChatId string `protobuf:"bytes,5,opt,name=platform_chat_id,json=platformChatId,proto3" json:"platform_chat_id,omitempty"`
	BuildPlatform  int32  `protobuf:"varint,6,opt,name=build_platform,json=buildPlatform,proto3" json:"build_platform,omitempty"`
	Skin           *Skin  `protobuf:"bytes,7,opt,name=skin,proto3" json:"skin,omitempty"`
	Teacher        bool   `protobuf:"varint,8,opt,name=teacher,proto3" json:"teacher,omitempty"`
	Host           bool   `protobuf:"varint,9,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *PlayerListEntry) Reset() {
	*x = PlayerListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerListEntry) ProtoMessage() {}

func (x *PlayerListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerListEntry.ProtoReflect.Descriptor instead.
func (*PlayerListEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{81}
}

func (x *PlayerListEntry) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PlayerListEntry) GetEntityUniqueId() int64 {
	if x != nil {
		return x.EntityUniqueId
	}
	return 0
}

func (x *PlayerListEntry) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlayerListEntry) GetXuid() string {
	if x != nil {
		return x.Xuid
	}
	return ""
}

func (x *PlayerListEntry) GetPlatformChatId() string {
	if x != nil {
		return x.PlatformChatId
	}
	return ""
}

func (x *PlayerListEntry) GetBuildPlatform() int32 {
	if x != nil {
		return x.BuildPlatform
	}
	return 0
}

func (x *PlayerListEntry) GetSkin() *Skin {
	if x != nil {
		return x.Skin
	}
	return nil
}

func (x *PlayerListEntry) GetTeacher() bool {
	if x != nil {
		return x.Teacher
	}
	return false
}

func (x *PlayerListEntry) GetHost() bool {
	if x != nil {
		return x.Host
	}
	return false
}

type PlayerMovementSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovementType                     int32 `protobuf:"varint,1,opt,name=movement_type,json=movementType,proto3" json:"movement_type,omitempty"`
	RewindHistorySize                int32 `protobuf:"varint,2,opt,name=rewind_history_size,json=rewindHistorySize,proto3" json:"rewind_history_size,omitempty"`
	ServerAuthoritativeBlockBreaking bool  `protobuf:"varint,3,opt,name=server_authoritative_block_breaking,json=serverAuthoritativeBlockBreaking,proto3" json:"server_authoritative_block_breaking,omitempty"`
}

func (x *PlayerMovementSettings) Reset() {
	*x = PlayerMovementSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMovementSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMovementSettings) ProtoMessage() {}

func (x *PlayerMovementSettings) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMovementSettings.ProtoReflect.Descriptor instead.
func (*PlayerMovementSettings) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{82}
}

func (x *PlayerMovementSettings) GetMovementType() int32 {
	if x != nil {
		return x.MovementType
	}
	return 0
}

func (x *PlayerMovementSettings) GetRewindHistorySize() int32 {
	if x != nil {
		return x.RewindHistorySize
	}
	return 0
}

func (x *PlayerMovementSettings) GetServerAuthoritativeBlockBreaking() bool {
	if x != nil {
		return x.ServerAuthoritativeBlockBreaking
	}
	return false
}

type PortalBuiltEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionId int32 `protobuf:"varint,1,opt,name=dimension_id,json=dimensionId,proto3" json:"dimension_id,omitempty"`
}

func (x *PortalBuiltEventData) Reset() {
	*x = PortalBuiltEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalBuiltEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalBuiltEventData) ProtoMessage() {}

func (x *PortalBuiltEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalBuiltEventData.ProtoReflect.Descriptor instead.
func (*PortalBuiltEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{83}
}

func (x *PortalBuiltEventData) GetDimensionId() int32 {
	if x != nil {
		return x.DimensionId
	}
	return 0
}

type PortalUsedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDimensionId int32 `protobuf:"varint,1,opt,name=from_dimension_id,json=fromDimensionId,proto3" json:"from_dimension_id,omitempty"`
	ToDimensionId   int32 `protobuf:"varint,2,opt,name=to_dimension_id,json=toDimensionId,proto3" json:"to_dimension_id,omitempty"`
}

func (x *PortalUsedEventData) Reset() {
	*x = PortalUsedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortalUsedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalUsedEventData) ProtoMessage() {}

func (x *PortalUsedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalUsedEventData.ProtoReflect.Descriptor instead.
func (*PortalUsedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{84}
}

func (x *PortalUsedEventData) GetFromDimensionId() int32 {
	if x != nil {
		return x.FromDimensionId
	}
	return 0
}

func (x *PortalUsedEventData) GetToDimensionId() int32 {
	if x != nil {
		return x.ToDimensionId
	}
	return 0
}

type PotionContainerChangeRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputItemId   int32 `protobuf:"varint,1,opt,name=input_item_id,json=inputItemId,proto3" json:"input_item_id,omitempty"`
	ReagentItemId int32 `protobuf:"varint,2,opt,name=reagent_item_id,json=reagentItemId,proto3" json:"reagent_item_id,omitempty"`
	OutputItemId  int32 `protobuf:"varint,3,opt,name=output_item_id,json=outputItemId,proto3" json:"output_item_id,omitempty"`
}

func (x *PotionContainerChangeRecipe) Reset() {
	*x = PotionContainerChangeRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionContainerChangeRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionContainerChangeRecipe) ProtoMessage() {}

func (x *PotionContainerChangeRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionContainerChangeRecipe.ProtoReflect.Descriptor instead.
func (*PotionContainerChangeRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{85}
}

func (x *PotionContainerChangeRecipe) GetInputItemId() int32 {
	if x != nil {
		return x.InputItemId
	}
	return 0
}

func (x *PotionContainerChangeRecipe) GetReagentItemId() int32 {
	if x != nil {
		return x.ReagentItemId
	}
	return 0
}

func (x *PotionContainerChangeRecipe) GetOutputItemId() int32 {
	if x != nil {
		return x.OutputItemId
	}
	return 0
}

type PotionRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputPotionId        int32 `protobuf:"varint,1,opt,name=input_potion_id,json=inputPotionId,proto3" json:"input_potion_id,omitempty"`
	InputPotionMetadata  int32 `protobuf:"varint,2,opt,name=input_potion_metadata,json=inputPotionMetadata,proto3" json:"input_potion_metadata,omitempty"`
	ReagentItemId        int32 `protobuf:"varint,3,opt,name=reagent_item_id,json=reagentItemId,proto3" json:"reagent_item_id,omitempty"`
	ReagentItemMetadata  int32 `protobuf:"varint,4,opt,name=reagent_item_metadata,json=reagentItemMetadata,proto3" json:"reagent_item_metadata,omitempty"`
	OutputPotionId       int32 `protobuf:"varint,5,opt,name=output_potion_id,json=outputPotionId,proto3" json:"output_potion_id,omitempty"`
	OutputPotionMetadata int32 `protobuf:"varint,6,opt,name=output_potion_metadata,json=outputPotionMetadata,proto3" json:"output_potion_metadata,omitempty"`
}

func (x *PotionRecipe) Reset() {
	*x = PotionRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionRecipe) ProtoMessage() {}

func (x *PotionRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionRecipe.ProtoReflect.Descriptor instead.
func (*PotionRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{86}
}

func (x *PotionRecipe) GetInputPotionId() int32 {
	if x != nil {
		return x.InputPotionId
	}
	return 0
}

func (x *PotionRecipe) GetInputPotionMetadata() int32 {
	if x != nil {
		return x.InputPotionMetadata
	}
	return 0
}

func (x *PotionRecipe) GetReagentItemId() int32 {
	if x != nil {
		return x.ReagentItemId
	}
	return 0
}

func (x *PotionRecipe) GetReagentItemMetadata() int32 {
	if x != nil {
		return x.ReagentItemMetadata
	}
	return 0
}

func (x *PotionRecipe) GetOutputPotionId() int32 {
	if x != nil {
		return x.OutputPotionId
	}
	return 0
}

func (x *PotionRecipe) GetOutputPotionMetadata() int32 {
	if x != nil {
		return x.OutputPotionMetadata
	}
	return 0
}

type RGBA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R uint32 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	G uint32 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	B uint32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	A uint32 `protobuf:"varint,4,opt,name=a,proto3" json:"a,omitempty"`
}

func (x *RGBA) Reset() {
	*x = RGBA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBA) ProtoMessage() {}

func (x *RGBA) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBA.ProtoReflect.Descriptor instead.
func (*RGBA) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{87}
}

func (x *RGBA) GetR() uint32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *RGBA) GetG() uint32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *RGBA) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *RGBA) GetA() uint32 {
	if x != nil {
		return x.A
	}
	return 0
}

type RaidUpdateEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRaidWave int32 `protobuf:"varint,1,opt,name=current_raid_wave,json=currentRaidWave,proto3" json:"current_raid_wave,omitempty"`
	TotalRaidWaves  int32 `protobuf:"varint,2,opt,name=total_raid_waves,json=totalRaidWaves,proto3" json:"total_raid_waves,omitempty"`
	WonRaid         bool  `protobuf:"varint,3,opt,name=won_raid,json=wonRaid,proto3" json:"won_raid,omitempty"`
}

func (x *RaidUpdateEventData) Reset() {
	*x = RaidUpdateEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidUpdateEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidUpdateEventData) ProtoMessage() {}

func (x *RaidUpdateEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidUpdateEventData.ProtoReflect.Descriptor instead.
func (*RaidUpdateEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{88}
}

func (x *RaidUpdateEventData) GetCurrentRaidWave() int32 {
	if x != nil {
		return x.CurrentRaidWave
	}
	return 0
}

func (x *RaidUpdateEventData) GetTotalRaidWaves() int32 {
	if x != nil {
		return x.TotalRaidWaves
	}
	return 0
}

func (x *RaidUpdateEventData) GetWonRaid() bool {
	if x != nil {
		return x.WonRaid
	}
	return false
}

type RecipeIngredientItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId     int32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MetadataValue int32 `protobuf:"varint,2,opt,name=metadata_value,json=metadataValue,proto3" json:"metadata_value,omitempty"`
	Count         int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RecipeIngredientItem) Reset() {
	*x = RecipeIngredientItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeIngredientItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeIngredientItem) ProtoMessage() {}

func (x *RecipeIngredientItem) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeIngredientItem.ProtoReflect.Descriptor instead.
func (*RecipeIngredientItem) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{89}
}

func (x *RecipeIngredientItem) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *RecipeIngredientItem) GetMetadataValue() int32 {
	if x != nil {
		return x.MetadataValue
	}
	return 0
}

func (x *RecipeIngredientItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ReleaseItemTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType   uint32        `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	HotBarSlot   int32         `protobuf:"varint,2,opt,name=hot_bar_slot,json=hotBarSlot,proto3" json:"hot_bar_slot,omitempty"`
	HeldItem     *ItemInstance `protobuf:"bytes,3,opt,name=held_item,json=heldItem,proto3" json:"held_item,omitempty"`
	HeadPosition *Vector3F     `protobuf:"bytes,4,opt,name=head_position,json=headPosition,proto3" json:"head_position,omitempty"`
}

func (x *ReleaseItemTransactionData) Reset() {
	*x = ReleaseItemTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseItemTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseItemTransactionData) ProtoMessage() {}

func (x *ReleaseItemTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseItemTransactionData.ProtoReflect.Descriptor instead.
func (*ReleaseItemTransactionData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{90}
}

func (x *ReleaseItemTransactionData) GetActionType() uint32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *ReleaseItemTransactionData) GetHotBarSlot() int32 {
	if x != nil {
		return x.HotBarSlot
	}
	return 0
}

func (x *ReleaseItemTransactionData) GetHeldItem() *ItemInstance {
	if x != nil {
		return x.HeldItem
	}
	return nil
}

func (x *ReleaseItemTransactionData) GetHeadPosition() *Vector3F {
	if x != nil {
		return x.HeadPosition
	}
	return nil
}

type RepeatedRGBA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rgba []*RGBA `protobuf:"bytes,1,rep,name=rgba,proto3" json:"rgba,omitempty"`
}

func (x *RepeatedRGBA) Reset() {
	*x = RepeatedRGBA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedRGBA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRGBA) ProtoMessage() {}

func (x *RepeatedRGBA) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRGBA.ProtoReflect.Descriptor instead.
func (*RepeatedRGBA) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{91}
}

func (x *RepeatedRGBA) GetRgba() []*RGBA {
	if x != nil {
		return x.Rgba
	}
	return nil
}

type ScoreboardEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId        int64  `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	ObjectiveName  string `protobuf:"bytes,2,opt,name=objective_name,json=objectiveName,proto3" json:"objective_name,omitempty"`
	Score          int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	IdentityType   uint32 `protobuf:"varint,4,opt,name=identity_type,json=identityType,proto3" json:"identity_type,omitempty"`
	EntityUniqueId int64  `protobuf:"varint,5,opt,name=entity_unique_id,json=entityUniqueId,proto3" json:"entity_unique_id,omitempty"`
	DisplayName    string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ScoreboardEntry) Reset() {
	*x = ScoreboardEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreboardEntry) ProtoMessage() {}

func (x *ScoreboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreboardEntry.ProtoReflect.Descriptor instead.
func (*ScoreboardEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{92}
}

func (x *ScoreboardEntry) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *ScoreboardEntry) GetObjectiveName() string {
	if x != nil {
		return x.ObjectiveName
	}
	return ""
}

func (x *ScoreboardEntry) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ScoreboardEntry) GetIdentityType() uint32 {
	if x != nil {
		return x.IdentityType
	}
	return 0
}

func (x *ScoreboardEntry) GetEntityUniqueId() int64 {
	if x != nil {
		return x.EntityUniqueId
	}
	return 0
}

func (x *ScoreboardEntry) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ScoreboardIdentityEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId        int64 `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	EntityUniqueId int64 `protobuf:"varint,2,opt,name=entity_unique_id,json=entityUniqueId,proto3" json:"entity_unique_id,omitempty"`
}

func (x *ScoreboardIdentityEntry) Reset() {
	*x = ScoreboardIdentityEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreboardIdentityEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreboardIdentityEntry) ProtoMessage() {}

func (x *ScoreboardIdentityEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreboardIdentityEntry.ProtoReflect.Descriptor instead.
func (*ScoreboardIdentityEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{93}
}

func (x *ScoreboardIdentityEntry) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *ScoreboardIdentityEntry) GetEntityUniqueId() int64 {
	if x != nil {
		return x.EntityUniqueId
	}
	return 0
}

type ShapedChemistryRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId        string                  `protobuf:"bytes,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	Width           int32                   `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height          int32                   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Input           []*RecipeIngredientItem `protobuf:"bytes,4,rep,name=input,proto3" json:"input,omitempty"`
	Output          []*ItemStack            `protobuf:"bytes,5,rep,name=output,proto3" json:"output,omitempty"`
	Uuid            string                  `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Block           string                  `protobuf:"bytes,7,opt,name=block,proto3" json:"block,omitempty"`
	Priority        int32                   `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	RecipeNetworkId uint32                  `protobuf:"varint,9,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *ShapedChemistryRecipe) Reset() {
	*x = ShapedChemistryRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapedChemistryRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapedChemistryRecipe) ProtoMessage() {}

func (x *ShapedChemistryRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapedChemistryRecipe.ProtoReflect.Descriptor instead.
func (*ShapedChemistryRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{94}
}

func (x *ShapedChemistryRecipe) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *ShapedChemistryRecipe) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ShapedChemistryRecipe) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ShapedChemistryRecipe) GetInput() []*RecipeIngredientItem {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ShapedChemistryRecipe) GetOutput() []*ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ShapedChemistryRecipe) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShapedChemistryRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *ShapedChemistryRecipe) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ShapedChemistryRecipe) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type ShapedRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId        string                  `protobuf:"bytes,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	Width           int32                   `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height          int32                   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Input           []*RecipeIngredientItem `protobuf:"bytes,4,rep,name=input,proto3" json:"input,omitempty"`
	Output          []*ItemStack            `protobuf:"bytes,5,rep,name=output,proto3" json:"output,omitempty"`
	Uuid            string                  `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Block           string                  `protobuf:"bytes,7,opt,name=block,proto3" json:"block,omitempty"`
	Priority        int32                   `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	RecipeNetworkId uint32                  `protobuf:"varint,9,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *ShapedRecipe) Reset() {
	*x = ShapedRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapedRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapedRecipe) ProtoMessage() {}

func (x *ShapedRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapedRecipe.ProtoReflect.Descriptor instead.
func (*ShapedRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{95}
}

func (x *ShapedRecipe) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *ShapedRecipe) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ShapedRecipe) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ShapedRecipe) GetInput() []*RecipeIngredientItem {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ShapedRecipe) GetOutput() []*ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ShapedRecipe) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShapedRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *ShapedRecipe) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ShapedRecipe) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type ShapelessChemistryRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId        string                  `protobuf:"bytes,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	Input           []*RecipeIngredientItem `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty"`
	Output          []*ItemStack            `protobuf:"bytes,3,rep,name=output,proto3" json:"output,omitempty"`
	Uuid            string                  `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Block           string                  `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Priority        int32                   `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	RecipeNetworkId uint32                  `protobuf:"varint,7,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *ShapelessChemistryRecipe) Reset() {
	*x = ShapelessChemistryRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapelessChemistryRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapelessChemistryRecipe) ProtoMessage() {}

func (x *ShapelessChemistryRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapelessChemistryRecipe.ProtoReflect.Descriptor instead.
func (*ShapelessChemistryRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{96}
}

func (x *ShapelessChemistryRecipe) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *ShapelessChemistryRecipe) GetInput() []*RecipeIngredientItem {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ShapelessChemistryRecipe) GetOutput() []*ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ShapelessChemistryRecipe) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShapelessChemistryRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *ShapelessChemistryRecipe) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ShapelessChemistryRecipe) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type ShapelessRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId        string                  `protobuf:"bytes,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	Input           []*RecipeIngredientItem `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty"`
	Output          []*ItemStack            `protobuf:"bytes,3,rep,name=output,proto3" json:"output,omitempty"`
	Uuid            string                  `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Block           string                  `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Priority        int32                   `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	RecipeNetworkId uint32                  `protobuf:"varint,7,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *ShapelessRecipe) Reset() {
	*x = ShapelessRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapelessRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapelessRecipe) ProtoMessage() {}

func (x *ShapelessRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapelessRecipe.ProtoReflect.Descriptor instead.
func (*ShapelessRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{97}
}

func (x *ShapelessRecipe) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *ShapelessRecipe) GetInput() []*RecipeIngredientItem {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ShapelessRecipe) GetOutput() []*ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ShapelessRecipe) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShapelessRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *ShapelessRecipe) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ShapelessRecipe) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type ShulkerBoxRecipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId        string                  `protobuf:"bytes,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	Input           []*RecipeIngredientItem `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty"`
	Output          []*ItemStack            `protobuf:"bytes,3,rep,name=output,proto3" json:"output,omitempty"`
	Uuid            string                  `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Block           string                  `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Priority        int32                   `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	RecipeNetworkId uint32                  `protobuf:"varint,7,opt,name=recipe_network_id,json=recipeNetworkId,proto3" json:"recipe_network_id,omitempty"`
}

func (x *ShulkerBoxRecipe) Reset() {
	*x = ShulkerBoxRecipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShulkerBoxRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShulkerBoxRecipe) ProtoMessage() {}

func (x *ShulkerBoxRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShulkerBoxRecipe.ProtoReflect.Descriptor instead.
func (*ShulkerBoxRecipe) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{98}
}

func (x *ShulkerBoxRecipe) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *ShulkerBoxRecipe) GetInput() []*RecipeIngredientItem {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ShulkerBoxRecipe) GetOutput() []*ItemStack {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ShulkerBoxRecipe) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShulkerBoxRecipe) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *ShulkerBoxRecipe) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ShulkerBoxRecipe) GetRecipeNetworkId() uint32 {
	if x != nil {
		return x.RecipeNetworkId
	}
	return 0
}

type Skin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinId                    string                    `protobuf:"bytes,1,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	PlayFabId                 string                    `protobuf:"bytes,2,opt,name=play_fab_id,json=playFabId,proto3" json:"play_fab_id,omitempty"`
	SkinResourcePatch         []uint32                  `protobuf:"varint,3,rep,packed,name=skin_resource_patch,json=skinResourcePatch,proto3" json:"skin_resource_patch,omitempty"`
	SkinImageWidth            uint32                    `protobuf:"varint,4,opt,name=skin_image_width,json=skinImageWidth,proto3" json:"skin_image_width,omitempty"`
	SkinImageHeight           uint32                    `protobuf:"varint,5,opt,name=skin_image_height,json=skinImageHeight,proto3" json:"skin_image_height,omitempty"`
	SkinData                  []uint32                  `protobuf:"varint,6,rep,packed,name=skin_data,json=skinData,proto3" json:"skin_data,omitempty"`
	Animations                []*SkinAnimation          `protobuf:"bytes,7,rep,name=animations,proto3" json:"animations,omitempty"`
	CapeImageWidth            uint32                    `protobuf:"varint,8,opt,name=cape_image_width,json=capeImageWidth,proto3" json:"cape_image_width,omitempty"`
	CapeImageHeight           uint32                    `protobuf:"varint,9,opt,name=cape_image_height,json=capeImageHeight,proto3" json:"cape_image_height,omitempty"`
	CapeData                  []uint32                  `protobuf:"varint,10,rep,packed,name=cape_data,json=capeData,proto3" json:"cape_data,omitempty"`
	SkinGeometry              []uint32                  `protobuf:"varint,11,rep,packed,name=skin_geometry,json=skinGeometry,proto3" json:"skin_geometry,omitempty"`
	AnimationData             []uint32                  `protobuf:"varint,12,rep,packed,name=animation_data,json=animationData,proto3" json:"animation_data,omitempty"`
	GeometryDataEngineVersion []uint32                  `protobuf:"varint,13,rep,packed,name=geometry_data_engine_version,json=geometryDataEngineVersion,proto3" json:"geometry_data_engine_version,omitempty"`
	PremiumSkin               bool                      `protobuf:"varint,14,opt,name=premium_skin,json=premiumSkin,proto3" json:"premium_skin,omitempty"`
	PersonaSkin               bool                      `protobuf:"varint,15,opt,name=persona_skin,json=personaSkin,proto3" json:"persona_skin,omitempty"`
	PersonaCapeOnClassicSkin  bool                      `protobuf:"varint,16,opt,name=persona_cape_on_classic_skin,json=personaCapeOnClassicSkin,proto3" json:"persona_cape_on_classic_skin,omitempty"`
	PrimaryUser               bool                      `protobuf:"varint,17,opt,name=primary_user,json=primaryUser,proto3" json:"primary_user,omitempty"`
	CapeId                    string                    `protobuf:"bytes,18,opt,name=cape_id,json=capeId,proto3" json:"cape_id,omitempty"`
	FullSkinId                string                    `protobuf:"bytes,19,opt,name=full_skin_id,json=fullSkinId,proto3" json:"full_skin_id,omitempty"`
	SkinColour                string                    `protobuf:"bytes,20,opt,name=skin_colour,json=skinColour,proto3" json:"skin_colour,omitempty"`
	ArmSize                   string                    `protobuf:"bytes,21,opt,name=arm_size,json=armSize,proto3" json:"arm_size,omitempty"`
	PersonaPieces             []*PersonaPiece           `protobuf:"bytes,22,rep,name=persona_pieces,json=personaPieces,proto3" json:"persona_pieces,omitempty"`
	PieceTintColours          []*PersonaPieceTintColour `protobuf:"bytes,23,rep,name=piece_tint_colours,json=pieceTintColours,proto3" json:"piece_tint_colours,omitempty"`
	Trusted                   bool                      `protobuf:"varint,24,opt,name=trusted,proto3" json:"trusted,omitempty"`
}

func (x *Skin) Reset() {
	*x = Skin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skin) ProtoMessage() {}

func (x *Skin) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skin.ProtoReflect.Descriptor instead.
func (*Skin) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{99}
}

func (x *Skin) GetSkinId() string {
	if x != nil {
		return x.SkinId
	}
	return ""
}

func (x *Skin) GetPlayFabId() string {
	if x != nil {
		return x.PlayFabId
	}
	return ""
}

func (x *Skin) GetSkinResourcePatch() []uint32 {
	if x != nil {
		return x.SkinResourcePatch
	}
	return nil
}

func (x *Skin) GetSkinImageWidth() uint32 {
	if x != nil {
		return x.SkinImageWidth
	}
	return 0
}

func (x *Skin) GetSkinImageHeight() uint32 {
	if x != nil {
		return x.SkinImageHeight
	}
	return 0
}

func (x *Skin) GetSkinData() []uint32 {
	if x != nil {
		return x.SkinData
	}
	return nil
}

func (x *Skin) GetAnimations() []*SkinAnimation {
	if x != nil {
		return x.Animations
	}
	return nil
}

func (x *Skin) GetCapeImageWidth() uint32 {
	if x != nil {
		return x.CapeImageWidth
	}
	return 0
}

func (x *Skin) GetCapeImageHeight() uint32 {
	if x != nil {
		return x.CapeImageHeight
	}
	return 0
}

func (x *Skin) GetCapeData() []uint32 {
	if x != nil {
		return x.CapeData
	}
	return nil
}

func (x *Skin) GetSkinGeometry() []uint32 {
	if x != nil {
		return x.SkinGeometry
	}
	return nil
}

func (x *Skin) GetAnimationData() []uint32 {
	if x != nil {
		return x.AnimationData
	}
	return nil
}

func (x *Skin) GetGeometryDataEngineVersion() []uint32 {
	if x != nil {
		return x.GeometryDataEngineVersion
	}
	return nil
}

func (x *Skin) GetPremiumSkin() bool {
	if x != nil {
		return x.PremiumSkin
	}
	return false
}

func (x *Skin) GetPersonaSkin() bool {
	if x != nil {
		return x.PersonaSkin
	}
	return false
}

func (x *Skin) GetPersonaCapeOnClassicSkin() bool {
	if x != nil {
		return x.PersonaCapeOnClassicSkin
	}
	return false
}

func (x *Skin) GetPrimaryUser() bool {
	if x != nil {
		return x.PrimaryUser
	}
	return false
}

func (x *Skin) GetCapeId() string {
	if x != nil {
		return x.CapeId
	}
	return ""
}

func (x *Skin) GetFullSkinId() string {
	if x != nil {
		return x.FullSkinId
	}
	return ""
}

func (x *Skin) GetSkinColour() string {
	if x != nil {
		return x.SkinColour
	}
	return ""
}

func (x *Skin) GetArmSize() string {
	if x != nil {
		return x.ArmSize
	}
	return ""
}

func (x *Skin) GetPersonaPieces() []*PersonaPiece {
	if x != nil {
		return x.PersonaPieces
	}
	return nil
}

func (x *Skin) GetPieceTintColours() []*PersonaPieceTintColour {
	if x != nil {
		return x.PieceTintColours
	}
	return nil
}

func (x *Skin) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

type SkinAnimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageWidth     uint32   `protobuf:"varint,1,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`
	ImageHeight    uint32   `protobuf:"varint,2,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"`
	ImageData      []uint32 `protobuf:"varint,3,rep,packed,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	AnimationType  uint32   `protobuf:"varint,4,opt,name=animation_type,json=animationType,proto3" json:"animation_type,omitempty"`
	FrameCount     float32  `protobuf:"fixed32,5,opt,name=frame_count,json=frameCount,proto3" json:"frame_count,omitempty"`
	ExpressionType uint32   `protobuf:"varint,6,opt,name=expression_type,json=expressionType,proto3" json:"expression_type,omitempty"`
}

func (x *SkinAnimation) Reset() {
	*x = SkinAnimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinAnimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinAnimation) ProtoMessage() {}

func (x *SkinAnimation) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinAnimation.ProtoReflect.Descriptor instead.
func (*SkinAnimation) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{100}
}

func (x *SkinAnimation) GetImageWidth() uint32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *SkinAnimation) GetImageHeight() uint32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *SkinAnimation) GetImageData() []uint32 {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *SkinAnimation) GetAnimationType() uint32 {
	if x != nil {
		return x.AnimationType
	}
	return 0
}

func (x *SkinAnimation) GetFrameCount() float32 {
	if x != nil {
		return x.FrameCount
	}
	return 0
}

func (x *SkinAnimation) GetExpressionType() uint32 {
	if x != nil {
		return x.ExpressionType
	}
	return 0
}

type SlashCommandExecutedEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandName    string   `protobuf:"bytes,1,opt,name=command_name,json=commandName,proto3" json:"command_name,omitempty"`
	SuccessCount   int32    `protobuf:"varint,2,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	OutputMessages []string `protobuf:"bytes,3,rep,name=output_messages,json=outputMessages,proto3" json:"output_messages,omitempty"`
}

func (x *SlashCommandExecutedEventData) Reset() {
	*x = SlashCommandExecutedEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashCommandExecutedEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashCommandExecutedEventData) ProtoMessage() {}

func (x *SlashCommandExecutedEventData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashCommandExecutedEventData.ProtoReflect.Descriptor instead.
func (*SlashCommandExecutedEventData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{101}
}

func (x *SlashCommandExecutedEventData) GetCommandName() string {
	if x != nil {
		return x.CommandName
	}
	return ""
}

func (x *SlashCommandExecutedEventData) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *SlashCommandExecutedEventData) GetOutputMessages() []string {
	if x != nil {
		return x.OutputMessages
	}
	return nil
}

type StackRequestSlotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId    uint32 `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Slot           uint32 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	StackNetworkId int32  `protobuf:"varint,3,opt,name=stack_network_id,json=stackNetworkId,proto3" json:"stack_network_id,omitempty"`
}

func (x *StackRequestSlotInfo) Reset() {
	*x = StackRequestSlotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackRequestSlotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackRequestSlotInfo) ProtoMessage() {}

func (x *StackRequestSlotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackRequestSlotInfo.ProtoReflect.Descriptor instead.
func (*StackRequestSlotInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{102}
}

func (x *StackRequestSlotInfo) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *StackRequestSlotInfo) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *StackRequestSlotInfo) GetStackNetworkId() int32 {
	if x != nil {
		return x.StackNetworkId
	}
	return 0
}

type StackResourcePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	SubPackName string `protobuf:"bytes,3,opt,name=sub_pack_name,json=subPackName,proto3" json:"sub_pack_name,omitempty"`
}

func (x *StackResourcePack) Reset() {
	*x = StackResourcePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackResourcePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackResourcePack) ProtoMessage() {}

func (x *StackResourcePack) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackResourcePack.ProtoReflect.Descriptor instead.
func (*StackResourcePack) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{103}
}

func (x *StackResourcePack) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StackResourcePack) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StackResourcePack) GetSubPackName() string {
	if x != nil {
		return x.SubPackName
	}
	return ""
}

type StackResponseContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId uint32                   `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	SlotInfo    []*StackResponseSlotInfo `protobuf:"bytes,2,rep,name=slot_info,json=slotInfo,proto3" json:"slot_info,omitempty"`
}

func (x *StackResponseContainerInfo) Reset() {
	*x = StackResponseContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackResponseContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackResponseContainerInfo) ProtoMessage() {}

func (x *StackResponseContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackResponseContainerInfo.ProtoReflect.Descriptor instead.
func (*StackResponseContainerInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{104}
}

func (x *StackResponseContainerInfo) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *StackResponseContainerInfo) GetSlotInfo() []*StackResponseSlotInfo {
	if x != nil {
		return x.SlotInfo
	}
	return nil
}

type StackResponseSlotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                 uint32 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	HotbarSlot           uint32 `protobuf:"varint,2,opt,name=hotbar_slot,json=hotbarSlot,proto3" json:"hotbar_slot,omitempty"`
	Count                uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	StackNetworkId       int32  `protobuf:"varint,4,opt,name=stack_network_id,json=stackNetworkId,proto3" json:"stack_network_id,omitempty"`
	CustomName           string `protobuf:"bytes,5,opt,name=custom_name,json=customName,proto3" json:"custom_name,omitempty"`
	DurabilityCorrection int32  `protobuf:"varint,6,opt,name=durability_correction,json=durabilityCorrection,proto3" json:"durability_correction,omitempty"`
}

func (x *StackResponseSlotInfo) Reset() {
	*x = StackResponseSlotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackResponseSlotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackResponseSlotInfo) ProtoMessage() {}

func (x *StackResponseSlotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackResponseSlotInfo.ProtoReflect.Descriptor instead.
func (*StackResponseSlotInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{105}
}

func (x *StackResponseSlotInfo) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *StackResponseSlotInfo) GetHotbarSlot() uint32 {
	if x != nil {
		return x.HotbarSlot
	}
	return 0
}

func (x *StackResponseSlotInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StackResponseSlotInfo) GetStackNetworkId() int32 {
	if x != nil {
		return x.StackNetworkId
	}
	return 0
}

func (x *StackResponseSlotInfo) GetCustomName() string {
	if x != nil {
		return x.CustomName
	}
	return ""
}

func (x *StackResponseSlotInfo) GetDurabilityCorrection() int32 {
	if x != nil {
		return x.DurabilityCorrection
	}
	return 0
}

type StructureSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaletteName               string    `protobuf:"bytes,1,opt,name=palette_name,json=paletteName,proto3" json:"palette_name,omitempty"`
	IgnoreEntities            bool      `protobuf:"varint,2,opt,name=ignore_entities,json=ignoreEntities,proto3" json:"ignore_entities,omitempty"`
	IgnoreBlocks              bool      `protobuf:"varint,3,opt,name=ignore_blocks,json=ignoreBlocks,proto3" json:"ignore_blocks,omitempty"`
	Size                      *Vector3I `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Offset                    *Vector3I `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	LastEditingPlayerUniqueId int64     `protobuf:"varint,6,opt,name=last_editing_player_unique_id,json=lastEditingPlayerUniqueId,proto3" json:"last_editing_player_unique_id,omitempty"`
	Rotation                  uint32    `protobuf:"varint,7,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Mirror                    uint32    `protobuf:"varint,8,opt,name=mirror,proto3" json:"mirror,omitempty"`
	AnimationMode             uint32    `protobuf:"varint,9,opt,name=animation_mode,json=animationMode,proto3" json:"animation_mode,omitempty"`
	AnimationDuration         float32   `protobuf:"fixed32,10,opt,name=animation_duration,json=animationDuration,proto3" json:"animation_duration,omitempty"`
	Integrity                 float32   `protobuf:"fixed32,11,opt,name=integrity,proto3" json:"integrity,omitempty"`
	Seed                      uint32    `protobuf:"varint,12,opt,name=seed,proto3" json:"seed,omitempty"`
	Pivot                     *Vector3F `protobuf:"bytes,13,opt,name=pivot,proto3" json:"pivot,omitempty"`
}

func (x *StructureSettings) Reset() {
	*x = StructureSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureSettings) ProtoMessage() {}

func (x *StructureSettings) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureSettings.ProtoReflect.Descriptor instead.
func (*StructureSettings) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{106}
}

func (x *StructureSettings) GetPaletteName() string {
	if x != nil {
		return x.PaletteName
	}
	return ""
}

func (x *StructureSettings) GetIgnoreEntities() bool {
	if x != nil {
		return x.IgnoreEntities
	}
	return false
}

func (x *StructureSettings) GetIgnoreBlocks() bool {
	if x != nil {
		return x.IgnoreBlocks
	}
	return false
}

func (x *StructureSettings) GetSize() *Vector3I {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *StructureSettings) GetOffset() *Vector3I {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *StructureSettings) GetLastEditingPlayerUniqueId() int64 {
	if x != nil {
		return x.LastEditingPlayerUniqueId
	}
	return 0
}

func (x *StructureSettings) GetRotation() uint32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *StructureSettings) GetMirror() uint32 {
	if x != nil {
		return x.Mirror
	}
	return 0
}

func (x *StructureSettings) GetAnimationMode() uint32 {
	if x != nil {
		return x.AnimationMode
	}
	return 0
}

func (x *StructureSettings) GetAnimationDuration() float32 {
	if x != nil {
		return x.AnimationDuration
	}
	return 0
}

func (x *StructureSettings) GetIntegrity() float32 {
	if x != nil {
		return x.Integrity
	}
	return 0
}

func (x *StructureSettings) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *StructureSettings) GetPivot() *Vector3F {
	if x != nil {
		return x.Pivot
	}
	return nil
}

type SubChunkEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset        *Vector3I `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Result        uint32    `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	RawPayload    []uint32  `protobuf:"varint,3,rep,packed,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	HeightMapType uint32    `protobuf:"varint,4,opt,name=height_map_type,json=heightMapType,proto3" json:"height_map_type,omitempty"`
	HeightMapData []uint32  `protobuf:"varint,5,rep,packed,name=height_map_data,json=heightMapData,proto3" json:"height_map_data,omitempty"`
	BlobHash      uint64    `protobuf:"varint,6,opt,name=blob_hash,json=blobHash,proto3" json:"blob_hash,omitempty"`
}

func (x *SubChunkEntry) Reset() {
	*x = SubChunkEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubChunkEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubChunkEntry) ProtoMessage() {}

func (x *SubChunkEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubChunkEntry.ProtoReflect.Descriptor instead.
func (*SubChunkEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{107}
}

func (x *SubChunkEntry) GetOffset() *Vector3I {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *SubChunkEntry) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *SubChunkEntry) GetRawPayload() []uint32 {
	if x != nil {
		return x.RawPayload
	}
	return nil
}

func (x *SubChunkEntry) GetHeightMapType() uint32 {
	if x != nil {
		return x.HeightMapType
	}
	return 0
}

func (x *SubChunkEntry) GetHeightMapData() []uint32 {
	if x != nil {
		return x.HeightMapData
	}
	return nil
}

func (x *SubChunkEntry) GetBlobHash() uint64 {
	if x != nil {
		return x.BlobHash
	}
	return 0
}

type SwapStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *StackRequestSlotInfo `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination *StackRequestSlotInfo `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *SwapStackRequestAction) Reset() {
	*x = SwapStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapStackRequestAction) ProtoMessage() {}

func (x *SwapStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapStackRequestAction.ProtoReflect.Descriptor instead.
func (*SwapStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{108}
}

func (x *SwapStackRequestAction) GetSource() *StackRequestSlotInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SwapStackRequestAction) GetDestination() *StackRequestSlotInfo {
	if x != nil {
		return x.Destination
	}
	return nil
}

type TakeOutContainerStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferStackRequestAction *TransferStackRequestAction `protobuf:"bytes,1,opt,name=transfer_stack_request_action,json=transferStackRequestAction,proto3" json:"transfer_stack_request_action,omitempty"`
}

func (x *TakeOutContainerStackRequestAction) Reset() {
	*x = TakeOutContainerStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeOutContainerStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeOutContainerStackRequestAction) ProtoMessage() {}

func (x *TakeOutContainerStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeOutContainerStackRequestAction.ProtoReflect.Descriptor instead.
func (*TakeOutContainerStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{109}
}

func (x *TakeOutContainerStackRequestAction) GetTransferStackRequestAction() *TransferStackRequestAction {
	if x != nil {
		return x.TransferStackRequestAction
	}
	return nil
}

type TakeStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferStackRequestAction *TransferStackRequestAction `protobuf:"bytes,1,opt,name=transfer_stack_request_action,json=transferStackRequestAction,proto3" json:"transfer_stack_request_action,omitempty"`
}

func (x *TakeStackRequestAction) Reset() {
	*x = TakeStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeStackRequestAction) ProtoMessage() {}

func (x *TakeStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeStackRequestAction.ProtoReflect.Descriptor instead.
func (*TakeStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{110}
}

func (x *TakeStackRequestAction) GetTransferStackRequestAction() *TransferStackRequestAction {
	if x != nil {
		return x.TransferStackRequestAction
	}
	return nil
}

type TexturePackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Version         string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Size            uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ContentKey      string `protobuf:"bytes,4,opt,name=content_key,json=contentKey,proto3" json:"content_key,omitempty"`
	SubPackName     string `protobuf:"bytes,5,opt,name=sub_pack_name,json=subPackName,proto3" json:"sub_pack_name,omitempty"`
	ContentIdentity string `protobuf:"bytes,6,opt,name=content_identity,json=contentIdentity,proto3" json:"content_identity,omitempty"`
	HasScripts      bool   `protobuf:"varint,7,opt,name=has_scripts,json=hasScripts,proto3" json:"has_scripts,omitempty"`
	RtxEnabled      bool   `protobuf:"varint,8,opt,name=rtx_enabled,json=rtxEnabled,proto3" json:"rtx_enabled,omitempty"`
}

func (x *TexturePackInfo) Reset() {
	*x = TexturePackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexturePackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexturePackInfo) ProtoMessage() {}

func (x *TexturePackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexturePackInfo.ProtoReflect.Descriptor instead.
func (*TexturePackInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{111}
}

func (x *TexturePackInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TexturePackInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TexturePackInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TexturePackInfo) GetContentKey() string {
	if x != nil {
		return x.ContentKey
	}
	return ""
}

func (x *TexturePackInfo) GetSubPackName() string {
	if x != nil {
		return x.SubPackName
	}
	return ""
}

func (x *TexturePackInfo) GetContentIdentity() string {
	if x != nil {
		return x.ContentIdentity
	}
	return ""
}

func (x *TexturePackInfo) GetHasScripts() bool {
	if x != nil {
		return x.HasScripts
	}
	return false
}

func (x *TexturePackInfo) GetRtxEnabled() bool {
	if x != nil {
		return x.RtxEnabled
	}
	return false
}

type TransferStackRequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Source      *StackRequestSlotInfo `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Destination *StackRequestSlotInfo `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *TransferStackRequestAction) Reset() {
	*x = TransferStackRequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStackRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStackRequestAction) ProtoMessage() {}

func (x *TransferStackRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStackRequestAction.ProtoReflect.Descriptor instead.
func (*TransferStackRequestAction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{112}
}

func (x *TransferStackRequestAction) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TransferStackRequestAction) GetSource() *StackRequestSlotInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TransferStackRequestAction) GetDestination() *StackRequestSlotInfo {
	if x != nil {
		return x.Destination
	}
	return nil
}

type UseItemOnEntityTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntityRuntimeId uint64        `protobuf:"varint,1,opt,name=target_entity_runtime_id,json=targetEntityRuntimeId,proto3" json:"target_entity_runtime_id,omitempty"`
	ActionType            uint32        `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	HotBarSlot            int32         `protobuf:"varint,3,opt,name=hot_bar_slot,json=hotBarSlot,proto3" json:"hot_bar_slot,omitempty"`
	HeldItem              *ItemInstance `protobuf:"bytes,4,opt,name=held_item,json=heldItem,proto3" json:"held_item,omitempty"`
	Position              *Vector3F     `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	ClickedPosition       *Vector3F     `protobuf:"bytes,6,opt,name=clicked_position,json=clickedPosition,proto3" json:"clicked_position,omitempty"`
}

func (x *UseItemOnEntityTransactionData) Reset() {
	*x = UseItemOnEntityTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseItemOnEntityTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseItemOnEntityTransactionData) ProtoMessage() {}

func (x *UseItemOnEntityTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseItemOnEntityTransactionData.ProtoReflect.Descriptor instead.
func (*UseItemOnEntityTransactionData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{113}
}

func (x *UseItemOnEntityTransactionData) GetTargetEntityRuntimeId() uint64 {
	if x != nil {
		return x.TargetEntityRuntimeId
	}
	return 0
}

func (x *UseItemOnEntityTransactionData) GetActionType() uint32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *UseItemOnEntityTransactionData) GetHotBarSlot() int32 {
	if x != nil {
		return x.HotBarSlot
	}
	return 0
}

func (x *UseItemOnEntityTransactionData) GetHeldItem() *ItemInstance {
	if x != nil {
		return x.HeldItem
	}
	return nil
}

func (x *UseItemOnEntityTransactionData) GetPosition() *Vector3F {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UseItemOnEntityTransactionData) GetClickedPosition() *Vector3F {
	if x != nil {
		return x.ClickedPosition
	}
	return nil
}

type UseItemTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyRequestId    int32                `protobuf:"varint,1,opt,name=legacy_request_id,json=legacyRequestId,proto3" json:"legacy_request_id,omitempty"`
	LegacySetItemSlots []*LegacySetItemSlot `protobuf:"bytes,2,rep,name=legacy_set_item_slots,json=legacySetItemSlots,proto3" json:"legacy_set_item_slots,omitempty"`
	Actions            []*InventoryAction   `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	ActionType         uint32               `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	BlockPosition      *Vector3I            `protobuf:"bytes,5,opt,name=block_position,json=blockPosition,proto3" json:"block_position,omitempty"`
	BlockFace          int32                `protobuf:"varint,6,opt,name=block_face,json=blockFace,proto3" json:"block_face,omitempty"`
	HotBarSlot         int32                `protobuf:"varint,7,opt,name=hot_bar_slot,json=hotBarSlot,proto3" json:"hot_bar_slot,omitempty"`
	HeldItem           *ItemInstance        `protobuf:"bytes,8,opt,name=held_item,json=heldItem,proto3" json:"held_item,omitempty"`
	Position           *Vector3F            `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
	ClickedPosition    *Vector3F            `protobuf:"bytes,10,opt,name=clicked_position,json=clickedPosition,proto3" json:"clicked_position,omitempty"`
	BlockRuntimeId     uint32               `protobuf:"varint,11,opt,name=block_runtime_id,json=blockRuntimeId,proto3" json:"block_runtime_id,omitempty"`
}

func (x *UseItemTransactionData) Reset() {
	*x = UseItemTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseItemTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseItemTransactionData) ProtoMessage() {}

func (x *UseItemTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseItemTransactionData.ProtoReflect.Descriptor instead.
func (*UseItemTransactionData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{114}
}

func (x *UseItemTransactionData) GetLegacyRequestId() int32 {
	if x != nil {
		return x.LegacyRequestId
	}
	return 0
}

func (x *UseItemTransactionData) GetLegacySetItemSlots() []*LegacySetItemSlot {
	if x != nil {
		return x.LegacySetItemSlots
	}
	return nil
}

func (x *UseItemTransactionData) GetActions() []*InventoryAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *UseItemTransactionData) GetActionType() uint32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *UseItemTransactionData) GetBlockPosition() *Vector3I {
	if x != nil {
		return x.BlockPosition
	}
	return nil
}

func (x *UseItemTransactionData) GetBlockFace() int32 {
	if x != nil {
		return x.BlockFace
	}
	return 0
}

func (x *UseItemTransactionData) GetHotBarSlot() int32 {
	if x != nil {
		return x.HotBarSlot
	}
	return 0
}

func (x *UseItemTransactionData) GetHeldItem() *ItemInstance {
	if x != nil {
		return x.HeldItem
	}
	return nil
}

func (x *UseItemTransactionData) GetPosition() *Vector3F {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UseItemTransactionData) GetClickedPosition() *Vector3F {
	if x != nil {
		return x.ClickedPosition
	}
	return nil
}

func (x *UseItemTransactionData) GetBlockRuntimeId() uint32 {
	if x != nil {
		return x.BlockRuntimeId
	}
	return 0
}

type Vector2F struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vector2F) Reset() {
	*x = Vector2F{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector2F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2F) ProtoMessage() {}

func (x *Vector2F) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2F.ProtoReflect.Descriptor instead.
func (*Vector2F) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{115}
}

func (x *Vector2F) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector2F) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Vector2I struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vector2I) Reset() {
	*x = Vector2I{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector2I) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2I) ProtoMessage() {}

func (x *Vector2I) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2I.ProtoReflect.Descriptor instead.
func (*Vector2I) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{116}
}

func (x *Vector2I) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector2I) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Vector3F struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector3F) Reset() {
	*x = Vector3F{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector3F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3F) ProtoMessage() {}

func (x *Vector3F) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3F.ProtoReflect.Descriptor instead.
func (*Vector3F) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{117}
}

func (x *Vector3F) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3F) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3F) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Vector3I struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector3I) Reset() {
	*x = Vector3I{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector3I) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3I) ProtoMessage() {}

func (x *Vector3I) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3I.ProtoReflect.Descriptor instead.
func (*Vector3I) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{118}
}

func (x *Vector3I) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3I) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3I) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x1b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x73, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x74, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x22, 0x73,
	0x0a, 0x1f, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x11,
	0x42, 0x65, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x31, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x69, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x53, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x15,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x6f, 0x73,
	0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6a,
	0x0a, 0x19, 0x43, 0x61, 0x75, 0x6c, 0x64, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x43, 0x61,
	0x75, 0x6c, 0x64, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xd5, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63,
	0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22,
	0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x22, 0x77, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x64, 0x72,
	0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x6b, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x19, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a,
	0x0a, 0x1f, 0x43, 0x72, 0x61, 0x66, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x27, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x47, 0x72, 0x69, 0x6e, 0x64, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x21, 0x43, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x6e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a,
	0x25, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4b, 0x0a, 0x1d, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x22, 0x3d,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x72, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a,
	0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0x6b, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x22, 0x54, 0x0a, 0x1d, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x49, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x6e, 0x6b, 0x55, 0x72, 0x69, 0x22, 0x3f, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x22, 0x41, 0x0a, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72,
	0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x35, 0x0a, 0x17, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x69, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x95, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x72, 0x6e,
	0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x46, 0x75, 0x72, 0x6e,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe4, 0x13, 0x0a, 0x0a, 0x49,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x7f, 0x0a, 0x27, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x65, 0x64,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x21, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x1d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x62, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x65,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x65, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x1f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x63, 0x61, 0x75, 0x6c, 0x64, 0x72, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x61, 0x75, 0x6c, 0x64, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x21, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x61, 0x75, 0x6c, 0x64, 0x72, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x6d, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x75,
	0x6c, 0x64, 0x72, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x75, 0x6c, 0x64, 0x72, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x61, 0x75, 0x6c, 0x64, 0x72,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x7c, 0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x8f, 0x01,
	0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x73, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x66, 0x69, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x73,
	0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5e, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d,
	0x6f, 0x62, 0x5f, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x6f, 0x62, 0x42, 0x6f, 0x72, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4d, 0x6f, 0x62, 0x42, 0x6f, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x64, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d,
	0x6f, 0x62, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x64,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x6f, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x6f, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x76, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e,
	0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x7c, 0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x22, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x73,
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x70, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x64, 0x72,
	0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x65, 0x74, 0x44, 0x69, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x50, 0x65, 0x74, 0x44, 0x69, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x69, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x69, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x67, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x61,
	0x69, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x64,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x86, 0x01, 0x0a, 0x2a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6c, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x25, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8e, 0x05, 0x0a, 0x19, 0x49, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x72, 0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x7c, 0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x22, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x8a, 0x01, 0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x22,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x12,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8b, 0x06, 0x0a, 0x07, 0x49, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x60,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x75, 0x72, 0x6e, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x48, 0x00, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46,
	0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x12, 0x53, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x75, 0x72,
	0x6e, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x75, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x64, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x64, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x6d, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x48, 0x00, 0x52, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x6c, 0x6b, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x68, 0x75, 0x6c, 0x6b, 0x65, 0x72,
	0x42, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x68, 0x75, 0x6c, 0x6b, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73,
	0x22, 0x8e, 0x16, 0x0a, 0x13, 0x49, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c,
	0x01, 0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a,
	0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x2c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x27,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x35, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x67, 0x72, 0x69, 0x6e, 0x64,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63,
	0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x47, 0x72, 0x69, 0x6e, 0x64, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x47, 0x72, 0x69,
	0x6e, 0x64, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x93, 0x01, 0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x65, 0x64, 0x72,
	0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x29, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x33, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x33, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x2a, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x25, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x36, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x30, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a,
	0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x70, 0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6c, 0x61, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x61, 0x62, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x29, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x61, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x28, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4d, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x30,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x22, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x30,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x61, 0x6b, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x61,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x4d, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x6b, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x09,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xfb, 0x02, 0x0a,
	0x09, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x08, 0x6e, 0x62, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x4e, 0x62, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6e, 0x62, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10,
	0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x1a, 0x50, 0x0a, 0x0c, 0x4e, 0x62, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23,
	0x0a, 0x21, 0x4c, 0x61, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x52, 0x47, 0x42, 0x41, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x22,
	0x8d, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x69,
	0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63,
	0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x64, 0x72,
	0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4d, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x62, 0x61, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x62, 0x61, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x10,
	0x4d, 0x6f, 0x62, 0x42, 0x6f, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x6f, 0x75, 0x72, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x18, 0x4d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x63, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0xf1, 0x01, 0x0a, 0x1a, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x63, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x4d, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x75, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72,
	0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x65, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x69, 0x65, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x65,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x73,
	0x22, 0xfa, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x44, 0x69, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x70, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x22, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x84, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x69, 0x52, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x22,
	0xa4, 0x02, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x75, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6b,
	0x69, 0x6e, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x39, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x69, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1b,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xa6, 0x02,
	0x0a, 0x0c, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x72, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x04, 0x52, 0x47, 0x42, 0x41, 0x12, 0x0c,
	0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x52, 0x61, 0x69, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x77,
	0x61, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x69, 0x64, 0x57, 0x61, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x57,
	0x61, 0x76, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x6f, 0x6e, 0x52, 0x61, 0x69, 0x64, 0x22,
	0x72, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x42, 0x61,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x66, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x47, 0x42, 0x41, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x67, 0x62, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x52, 0x47, 0x42, 0x41, 0x52, 0x04, 0x72, 0x67, 0x62, 0x61, 0x22, 0xdb, 0x01,
	0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x17, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x15,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x64, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x0c, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75,
	0x66, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x90,
	0x02, 0x0a, 0x18, 0x53, 0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63,
	0x6b, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x64,
	0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x10,
	0x53, 0x68, 0x75, 0x6c, 0x6b, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xea, 0x07, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x66, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x46, 0x61, 0x62, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6e,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x6b, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x6b, 0x69,
	0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x61, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x61, 0x70,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69,
	0x6e, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x1c, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x1c,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x43, 0x61, 0x70, 0x65, 0x4f,
	0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x72, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x72, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x69, 0x65, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x10, 0x70, 0x69, 0x65, 0x63, 0x65, 0x54, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6e, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x14,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x1a,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x01,
	0x0a, 0x15, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x6f, 0x74, 0x62, 0x61, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x68, 0x6f, 0x74, 0x62, 0x61, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x15, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x75,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x86, 0x04, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63,
	0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x69, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x69, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x66, 0x52, 0x05, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x33, 0x69, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65,
	0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x54,
	0x61, 0x6b, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a,
	0x16, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x85, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x74, 0x78,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x74, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x02,
	0x0a, 0x1e, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f,
	0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x66, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x66, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x04, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x12, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x69, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x42, 0x61,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x66, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x64, 0x72, 0x6f,
	0x63, 0x6b, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x66, 0x52, 0x0f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x08, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x22, 0x26, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x69, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x34, 0x0a, 0x08, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22,
	0x34, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x7a, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x77, 0x69, 0x73, 0x74, 0x65, 0x64, 0x61, 0x73, 0x79, 0x6c, 0x75,
	0x6d, 0x6d, 0x63, 0x2f, 0x62, 0x65, 0x64, 0x72, 0x6f, 0x63, 0x6b, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 122)
var file_types_proto_goTypes = []interface{}{
	(*AchievementAwardedEventData)(nil),              // 0: bedrockbuf.AchievementAwardedEventData
	(*AgentCommandEventData)(nil),                    // 1: bedrockbuf.AgentCommandEventData
	(*Attribute)(nil),                                // 2: bedrockbuf.Attribute
	(*AutoCraftRecipeStackRequestAction)(nil),        // 3: bedrockbuf.AutoCraftRecipeStackRequestAction
	(*BeaconPaymentStackRequestAction)(nil),          // 4: bedrockbuf.BeaconPaymentStackRequestAction
	(*BehaviourPackInfo)(nil),                        // 5: bedrockbuf.BehaviourPackInfo
	(*BellUsedEventData)(nil),                        // 6: bedrockbuf.BellUsedEventData
	(*BlockChangeEntry)(nil),                         // 7: bedrockbuf.BlockChangeEntry
	(*BlockEntry)(nil),                               // 8: bedrockbuf.BlockEntry
	(*BossKilledEventData)(nil),                      // 9: bedrockbuf.BossKilledEventData
	(*CacheBlob)(nil),                                // 10: bedrockbuf.CacheBlob
	(*CauldronInteractEventData)(nil),                // 11: bedrockbuf.CauldronInteractEventData
	(*CauldronUsedEventData)(nil),                    // 12: bedrockbuf.CauldronUsedEventData
	(*Command)(nil),                                  // 13: bedrockbuf.Command
	(*CommandEnum)(nil),                              // 14: bedrockbuf.CommandEnum
	(*CommandEnumConstraint)(nil),                    // 15: bedrockbuf.CommandEnumConstraint
	(*CommandOrigin)(nil),                            // 16: bedrockbuf.CommandOrigin
	(*CommandOutputMessage)(nil),                     // 17: bedrockbuf.CommandOutputMessage
	(*CommandOverload)(nil),                          // 18: bedrockbuf.CommandOverload
	(*CommandParameter)(nil),                         // 19: bedrockbuf.CommandParameter
	(*ComposterInteractEventData)(nil),               // 20: bedrockbuf.ComposterInteractEventData
	(*ConsumeStackRequestAction)(nil),                // 21: bedrockbuf.ConsumeStackRequestAction
	(*CraftCreativeStackRequestAction)(nil),          // 22: bedrockbuf.CraftCreativeStackRequestAction
	(*CraftGrindstoneRecipeStackRequestAction)(nil),  // 23: bedrockbuf.CraftGrindstoneRecipeStackRequestAction
	(*CraftLoomRecipeStackRequestAction)(nil),        // 24: bedrockbuf.CraftLoomRecipeStackRequestAction
	(*CraftNonImplementedStackRequestAction)(nil),    // 25: bedrockbuf.CraftNonImplementedStackRequestAction
	(*CraftRecipeOptionalStackRequestAction)(nil),    // 26: bedrockbuf.CraftRecipeOptionalStackRequestAction
	(*CraftRecipeStackRequestAction)(nil),            // 27: bedrockbuf.CraftRecipeStackRequestAction
	(*CraftResultsDeprecatedStackRequestAction)(nil), // 28: bedrockbuf.CraftResultsDeprecatedStackRequestAction
	(*CreateStackRequestAction)(nil),                 // 29: bedrockbuf.CreateStackRequestAction
	(*CreativeItem)(nil),                             // 30: bedrockbuf.CreativeItem
	(*DestroyStackRequestAction)(nil),                // 31: bedrockbuf.DestroyStackRequestAction
	(*DropStackRequestAction)(nil),                   // 32: bedrockbuf.DropStackRequestAction
	(*EducationExternalLinkSettings)(nil),            // 33: bedrockbuf.EducationExternalLinkSettings
	(*EducationSharedResourceURI)(nil),               // 34: bedrockbuf.EducationSharedResourceURI
	(*EnchantmentInstance)(nil),                      // 35: bedrockbuf.EnchantmentInstance
	(*EnchantmentOption)(nil),                        // 36: bedrockbuf.EnchantmentOption
	(*EntityDefinitionTriggerEventData)(nil),         // 37: bedrockbuf.EntityDefinitionTriggerEventData
	(*EntityInteractEventData)(nil),                  // 38: bedrockbuf.EntityInteractEventData
	(*EntityLink)(nil),                               // 39: bedrockbuf.EntityLink
	(*ExperimentData)(nil),                           // 40: bedrockbuf.ExperimentData
	(*ExtractHoneyEventData)(nil),                    // 41: bedrockbuf.ExtractHoneyEventData
	(*FishBucketedEventData)(nil),                    // 42: bedrockbuf.FishBucketedEventData
	(*FurnaceDataRecipe)(nil),                        // 43: bedrockbuf.FurnaceDataRecipe
	(*FurnaceRecipe)(nil),                            // 44: bedrockbuf.FurnaceRecipe
	(*GameRule)(nil),                                 // 45: bedrockbuf.GameRule
	(*IEventData)(nil),                               // 46: bedrockbuf.IEventData
	(*IInventoryTransactionData)(nil),                // 47: bedrockbuf.IInventoryTransactionData
	(*IRecipe)(nil),                                  // 48: bedrockbuf.IRecipe
	(*IStackRequestAction)(nil),                      // 49: bedrockbuf.IStackRequestAction
	(*InventoryAction)(nil),                          // 50: bedrockbuf.InventoryAction
	(*ItemComponentEntry)(nil),                       // 51: bedrockbuf.ItemComponentEntry
	(*ItemEnchantments)(nil),                         // 52: bedrockbuf.ItemEnchantments
	(*ItemEntry)(nil),                                // 53: bedrockbuf.ItemEntry
	(*ItemInstance)(nil),                             // 54: bedrockbuf.ItemInstance
	(*ItemStack)(nil),                                // 55: bedrockbuf.ItemStack
	(*ItemStackRequest)(nil),                         // 56: bedrockbuf.ItemStackRequest
	(*ItemStackResponse)(nil),                        // 57: bedrockbuf.ItemStackResponse
	(*ItemType)(nil),                                 // 58: bedrockbuf.ItemType
	(*LabTableCombineStackRequestAction)(nil),        // 59: bedrockbuf.LabTableCombineStackRequestAction
	(*LegacySetItemSlot)(nil),                        // 60: bedrockbuf.LegacySetItemSlot
	(*MapDecoration)(nil),                            // 61: bedrockbuf.MapDecoration
	(*MapTrackedObject)(nil),                         // 62: bedrockbuf.MapTrackedObject
	(*MaterialReducer)(nil),                          // 63: bedrockbuf.MaterialReducer
	(*MaterialReducerOutput)(nil),                    // 64: bedrockbuf.MaterialReducerOutput
	(*MineBlockStackRequestAction)(nil),              // 65: bedrockbuf.MineBlockStackRequestAction
	(*MismatchTransactionData)(nil),                  // 66: bedrockbuf.MismatchTransactionData
	(*MobBornEventData)(nil),                         // 67: bedrockbuf.MobBornEventData
	(*MobKilledEventData)(nil),                       // 68: bedrockbuf.MobKilledEventData
	(*MovementAnomalyEventData)(nil),                 // 69: bedrockbuf.MovementAnomalyEventData
	(*MovementCorrectedEventData)(nil),               // 70: bedrockbuf.MovementCorrectedEventData
	(*MultiRecipe)(nil),                              // 71: bedrockbuf.MultiRecipe
	(*NormalTransactionData)(nil),                    // 72: bedrockbuf.NormalTransactionData
	(*PatternRemovedEventData)(nil),                  // 73: bedrockbuf.PatternRemovedEventData
	(*PersonaPiece)(nil),                             // 74: bedrockbuf.PersonaPiece
	(*PersonaPieceTintColour)(nil),                   // 75: bedrockbuf.PersonaPieceTintColour
	(*PetDiedEventData)(nil),                         // 76: bedrockbuf.PetDiedEventData
	(*PlaceInContainerStackRequestAction)(nil),       // 77: bedrockbuf.PlaceInContainerStackRequestAction
	(*PlaceStackRequestAction)(nil),                  // 78: bedrockbuf.PlaceStackRequestAction
	(*PlayerBlockAction)(nil),                        // 79: bedrockbuf.PlayerBlockAction
	(*PlayerDiedEventData)(nil),                      // 80: bedrockbuf.PlayerDiedEventData
	(*PlayerListEntry)(nil),                          // 81: bedrockbuf.PlayerListEntry
	(*PlayerMovementSettings)(nil),                   // 82: bedrockbuf.PlayerMovementSettings
	(*PortalBuiltEventData)(nil),                     // 83: bedrockbuf.PortalBuiltEventData
	(*PortalUsedEventData)(nil),                      // 84: bedrockbuf.PortalUsedEventData
	(*PotionContainerChangeRecipe)(nil),              // 85: bedrockbuf.PotionContainerChangeRecipe
	(*PotionRecipe)(nil),                             // 86: bedrockbuf.PotionRecipe
	(*RGBA)(nil),                                     // 87: bedrockbuf.RGBA
	(*RaidUpdateEventData)(nil),                      // 88: bedrockbuf.RaidUpdateEventData
	(*RecipeIngredientItem)(nil),                     // 89: bedrockbuf.RecipeIngredientItem
	(*ReleaseItemTransactionData)(nil),               // 90: bedrockbuf.ReleaseItemTransactionData
	(*RepeatedRGBA)(nil),                             // 91: bedrockbuf.RepeatedRGBA
	(*ScoreboardEntry)(nil),                          // 92: bedrockbuf.ScoreboardEntry
	(*ScoreboardIdentityEntry)(nil),                  // 93: bedrockbuf.ScoreboardIdentityEntry
	(*ShapedChemistryRecipe)(nil),                    // 94: bedrockbuf.ShapedChemistryRecipe
	(*ShapedRecipe)(nil),                             // 95: bedrockbuf.ShapedRecipe
	(*ShapelessChemistryRecipe)(nil),                 // 96: bedrockbuf.ShapelessChemistryRecipe
	(*ShapelessRecipe)(nil),                          // 97: bedrockbuf.ShapelessRecipe
	(*ShulkerBoxRecipe)(nil),                         // 98: bedrockbuf.ShulkerBoxRecipe
	(*Skin)(nil),                                     // 99: bedrockbuf.Skin
	(*SkinAnimation)(nil),                            // 100: bedrockbuf.SkinAnimation
	(*SlashCommandExecutedEventData)(nil),            // 101: bedrockbuf.SlashCommandExecutedEventData
	(*StackRequestSlotInfo)(nil),                     // 102: bedrockbuf.StackRequestSlotInfo
	(*StackResourcePack)(nil),                        // 103: bedrockbuf.StackResourcePack
	(*StackResponseContainerInfo)(nil),               // 104: bedrockbuf.StackResponseContainerInfo
	(*StackResponseSlotInfo)(nil),                    // 105: bedrockbuf.StackResponseSlotInfo
	(*StructureSettings)(nil),                        // 106: bedrockbuf.StructureSettings
	(*SubChunkEntry)(nil),                            // 107: bedrockbuf.SubChunkEntry
	(*SwapStackRequestAction)(nil),                   // 108: bedrockbuf.SwapStackRequestAction
	(*TakeOutContainerStackRequestAction)(nil),       // 109: bedrockbuf.TakeOutContainerStackRequestAction
	(*TakeStackRequestAction)(nil),                   // 110: bedrockbuf.TakeStackRequestAction
	(*TexturePackInfo)(nil),                          // 111: bedrockbuf.TexturePackInfo
	(*TransferStackRequestAction)(nil),               // 112: bedrockbuf.TransferStackRequestAction
	(*UseItemOnEntityTransactionData)(nil),           // 113: bedrockbuf.UseItemOnEntityTransactionData
	(*UseItemTransactionData)(nil),                   // 114: bedrockbuf.UseItemTransactionData
	(*Vector2F)(nil),                                 // 115: bedrockbuf.Vector2f
	(*Vector2I)(nil),                                 // 116: bedrockbuf.Vector2i
	(*Vector3F)(nil),                                 // 117: bedrockbuf.Vector3f
	(*Vector3I)(nil),                                 // 118: bedrockbuf.Vector3i
	nil,                                              // 119: bedrockbuf.BlockEntry.PropertiesEntry
	nil,                                              // 120: bedrockbuf.ItemComponentEntry.DataEntry
	nil,                                              // 121: bedrockbuf.ItemStack.NbtDataEntry
	(*anypb.Any)(nil),                                // 122: google.protobuf.Any
}
var file_types_proto_depIdxs = []int32{
	118, // 0: bedrockbuf.BlockChangeEntry.block_pos:type_name -> bedrockbuf.Vector3i
	119, // 1: bedrockbuf.BlockEntry.properties:type_name -> bedrockbuf.BlockEntry.PropertiesEntry
	18,  // 2: bedrockbuf.Command.overloads:type_name -> bedrockbuf.CommandOverload
	19,  // 3: bedrockbuf.CommandOverload.parameters:type_name -> bedrockbuf.CommandParameter
	14,  // 4: bedrockbuf.CommandParameter.enum:type_name -> bedrockbuf.CommandEnum
	31,  // 5: bedrockbuf.ConsumeStackRequestAction.destroy_stack_request_action:type_name -> bedrockbuf.DestroyStackRequestAction
	55,  // 6: bedrockbuf.CraftResultsDeprecatedStackRequestAction.result_items:type_name -> bedrockbuf.ItemStack
	55,  // 7: bedrockbuf.CreativeItem.item:type_name -> bedrockbuf.ItemStack
	102, // 8: bedrockbuf.DestroyStackRequestAction.source:type_name -> bedrockbuf.StackRequestSlotInfo
	102, // 9: bedrockbuf.DropStackRequestAction.source:type_name -> bedrockbuf.StackRequestSlotInfo
	52,  // 10: bedrockbuf.EnchantmentOption.enchantments:type_name -> bedrockbuf.ItemEnchantments
	58,  // 11: bedrockbuf.FurnaceDataRecipe.input_type:type_name -> bedrockbuf.ItemType
	55,  // 12: bedrockbuf.FurnaceDataRecipe.output:type_name -> bedrockbuf.ItemStack
	58,  // 13: bedrockbuf.FurnaceRecipe.input_type:type_name -> bedrockbuf.ItemType
	55,  // 14: bedrockbuf.FurnaceRecipe.output:type_name -> bedrockbuf.ItemStack
	122, // 15: bedrockbuf.GameRule.value:type_name -> google.protobuf.Any
	0,   // 16: bedrockbuf.IEventData.protocol_achievement_awarded_event_data:type_name -> bedrockbuf.AchievementAwardedEventData
	1,   // 17: bedrockbuf.IEventData.protocol_agent_command_event_data:type_name -> bedrockbuf.AgentCommandEventData
	6,   // 18: bedrockbuf.IEventData.protocol_bell_used_event_data:type_name -> bedrockbuf.BellUsedEventData
	9,   // 19: bedrockbuf.IEventData.protocol_boss_killed_event_data:type_name -> bedrockbuf.BossKilledEventData
	11,  // 20: bedrockbuf.IEventData.protocol_cauldron_interact_event_data:type_name -> bedrockbuf.CauldronInteractEventData
	12,  // 21: bedrockbuf.IEventData.protocol_cauldron_used_event_data:type_name -> bedrockbuf.CauldronUsedEventData
	20,  // 22: bedrockbuf.IEventData.protocol_composter_interact_event_data:type_name -> bedrockbuf.ComposterInteractEventData
	37,  // 23: bedrockbuf.IEventData.protocol_entity_definition_trigger_event_data:type_name -> bedrockbuf.EntityDefinitionTriggerEventData
	38,  // 24: bedrockbuf.IEventData.protocol_entity_interact_event_data:type_name -> bedrockbuf.EntityInteractEventData
	41,  // 25: bedrockbuf.IEventData.protocol_extract_honey_event_data:type_name -> bedrockbuf.ExtractHoneyEventData
	42,  // 26: bedrockbuf.IEventData.protocol_fish_bucketed_event_data:type_name -> bedrockbuf.FishBucketedEventData
	67,  // 27: bedrockbuf.IEventData.protocol_mob_born_event_data:type_name -> bedrockbuf.MobBornEventData
	68,  // 28: bedrockbuf.IEventData.protocol_mob_killed_event_data:type_name -> bedrockbuf.MobKilledEventData
	69,  // 29: bedrockbuf.IEventData.protocol_movement_anomaly_event_data:type_name -> bedrockbuf.MovementAnomalyEventData
	70,  // 30: bedrockbuf.IEventData.protocol_movement_corrected_event_data:type_name -> bedrockbuf.MovementCorrectedEventData
	73,  // 31: bedrockbuf.IEventData.protocol_pattern_removed_event_data:type_name -> bedrockbuf.PatternRemovedEventData
	76,  // 32: bedrockbuf.IEventData.protocol_pet_died_event_data:type_name -> bedrockbuf.PetDiedEventData
	80,  // 33: bedrockbuf.IEventData.protocol_player_died_event_data:type_name -> bedrockbuf.PlayerDiedEventData
	83,  // 34: bedrockbuf.IEventData.protocol_portal_built_event_data:type_name -> bedrockbuf.PortalBuiltEventData
	84,  // 35: bedrockbuf.IEventData.protocol_portal_used_event_data:type_name -> bedrockbuf.PortalUsedEventData
	88,  // 36: bedrockbuf.IEventData.protocol_raid_update_event_data:type_name -> bedrockbuf.RaidUpdateEventData
	101, // 37: bedrockbuf.IEventData.protocol_slash_command_executed_event_data:type_name -> bedrockbuf.SlashCommandExecutedEventData
	66,  // 38: bedrockbuf.IInventoryTransactionData.protocol_mismatch_transaction_data:type_name -> bedrockbuf.MismatchTransactionData
	72,  // 39: bedrockbuf.IInventoryTransactionData.protocol_normal_transaction_data:type_name -> bedrockbuf.NormalTransactionData
	90,  // 40: bedrockbuf.IInventoryTransactionData.protocol_release_item_transaction_data:type_name -> bedrockbuf.ReleaseItemTransactionData
	113, // 41: bedrockbuf.IInventoryTransactionData.protocol_use_item_on_entity_transaction_data:type_name -> bedrockbuf.UseItemOnEntityTransactionData
	114, // 42: bedrockbuf.IInventoryTransactionData.protocol_use_item_transaction_data:type_name -> bedrockbuf.UseItemTransactionData
	43,  // 43: bedrockbuf.IRecipe.protocol_furnace_data_recipe:type_name -> bedrockbuf.FurnaceDataRecipe
	44,  // 44: bedrockbuf.IRecipe.protocol_furnace_recipe:type_name -> bedrockbuf.FurnaceRecipe
	71,  // 45: bedrockbuf.IRecipe.protocol_multi_recipe:type_name -> bedrockbuf.MultiRecipe
	94,  // 46: bedrockbuf.IRecipe.protocol_shaped_chemistry_recipe:type_name -> bedrockbuf.ShapedChemistryRecipe
	95,  // 47: bedrockbuf.IRecipe.protocol_shaped_recipe:type_name -> bedrockbuf.ShapedRecipe
	96,  // 48: bedrockbuf.IRecipe.protocol_shapeless_chemistry_recipe:type_name -> bedrockbuf.ShapelessChemistryRecipe
	97,  // 49: bedrockbuf.IRecipe.protocol_shapeless_recipe:type_name -> bedrockbuf.ShapelessRecipe
	98,  // 50: bedrockbuf.IRecipe.protocol_shulker_box_recipe:type_name -> bedrockbuf.ShulkerBoxRecipe
	3,   // 51: bedrockbuf.IStackRequestAction.protocol_auto_craft_recipe_stack_request_action:type_name -> bedrockbuf.AutoCraftRecipeStackRequestAction
	4,   // 52: bedrockbuf.IStackRequestAction.protocol_beacon_payment_stack_request_action:type_name -> bedrockbuf.BeaconPaymentStackRequestAction
	21,  // 53: bedrockbuf.IStackRequestAction.protocol_consume_stack_request_action:type_name -> bedrockbuf.ConsumeStackRequestAction
	22,  // 54: bedrockbuf.IStackRequestAction.protocol_craft_creative_stack_request_action:type_name -> bedrockbuf.CraftCreativeStackRequestAction
	23,  // 55: bedrockbuf.IStackRequestAction.protocol_craft_grindstone_recipe_stack_request_action:type_name -> bedrockbuf.CraftGrindstoneRecipeStackRequestAction
	24,  // 56: bedrockbuf.IStackRequestAction.protocol_craft_loom_recipe_stack_request_action:type_name -> bedrockbuf.CraftLoomRecipeStackRequestAction
	25,  // 57: bedrockbuf.IStackRequestAction.protocol_craft_non_implemented_stack_request_action:type_name -> bedrockbuf.CraftNonImplementedStackRequestAction
	26,  // 58: bedrockbuf.IStackRequestAction.protocol_craft_recipe_optional_stack_request_action:type_name -> bedrockbuf.CraftRecipeOptionalStackRequestAction
	27,  // 59: bedrockbuf.IStackRequestAction.protocol_craft_recipe_stack_request_action:type_name -> bedrockbuf.CraftRecipeStackRequestAction
	28,  // 60: bedrockbuf.IStackRequestAction.protocol_craft_results_deprecated_stack_request_action:type_name -> bedrockbuf.CraftResultsDeprecatedStackRequestAction
	29,  // 61: bedrockbuf.IStackRequestAction.protocol_create_stack_request_action:type_name -> bedrockbuf.CreateStackRequestAction
	31,  // 62: bedrockbuf.IStackRequestAction.protocol_destroy_stack_request_action:type_name -> bedrockbuf.DestroyStackRequestAction
	32,  // 63: bedrockbuf.IStackRequestAction.protocol_drop_stack_request_action:type_name -> bedrockbuf.DropStackRequestAction
	59,  // 64: bedrockbuf.IStackRequestAction.protocol_lab_table_combine_stack_request_action:type_name -> bedrockbuf.LabTableCombineStackRequestAction
	65,  // 65: bedrockbuf.IStackRequestAction.protocol_mine_block_stack_request_action:type_name -> bedrockbuf.MineBlockStackRequestAction
	77,  // 66: bedrockbuf.IStackRequestAction.protocol_place_in_container_stack_request_action:type_name -> bedrockbuf.PlaceInContainerStackRequestAction
	78,  // 67: bedrockbuf.IStackRequestAction.protocol_place_stack_request_action:type_name -> bedrockbuf.PlaceStackRequestAction
	108, // 68: bedrockbuf.IStackRequestAction.protocol_swap_stack_request_action:type_name -> bedrockbuf.SwapStackRequestAction
	109, // 69: bedrockbuf.IStackRequestAction.protocol_take_out_container_stack_request_action:type_name -> bedrockbuf.TakeOutContainerStackRequestAction
	110, // 70: bedrockbuf.IStackRequestAction.protocol_take_stack_request_action:type_name -> bedrockbuf.TakeStackRequestAction
	54,  // 71: bedrockbuf.InventoryAction.old_item:type_name -> bedrockbuf.ItemInstance
	54,  // 72: bedrockbuf.InventoryAction.new_item:type_name -> bedrockbuf.ItemInstance
	120, // 73: bedrockbuf.ItemComponentEntry.data:type_name -> bedrockbuf.ItemComponentEntry.DataEntry
	35,  // 74: bedrockbuf.ItemEnchantments.enchantments:type_name -> bedrockbuf.EnchantmentInstance
	55,  // 75: bedrockbuf.ItemInstance.stack:type_name -> bedrockbuf.ItemStack
	58,  // 76: bedrockbuf.ItemStack.item_type:type_name -> bedrockbuf.ItemType
	121, // 77: bedrockbuf.ItemStack.nbt_data:type_name -> bedrockbuf.ItemStack.NbtDataEntry
	49,  // 78: bedrockbuf.ItemStackRequest.actions:type_name -> bedrockbuf.IStackRequestAction
	104, // 79: bedrockbuf.ItemStackResponse.container_info:type_name -> bedrockbuf.StackResponseContainerInfo
	87,  // 80: bedrockbuf.MapDecoration.colour:type_name -> bedrockbuf.RGBA
	118, // 81: bedrockbuf.MapTrackedObject.block_position:type_name -> bedrockbuf.Vector3i
	58,  // 82: bedrockbuf.MaterialReducer.input_item:type_name -> bedrockbuf.ItemType
	64,  // 83: bedrockbuf.MaterialReducer.outputs:type_name -> bedrockbuf.MaterialReducerOutput
	112, // 84: bedrockbuf.PlaceInContainerStackRequestAction.transfer_stack_request_action:type_name -> bedrockbuf.TransferStackRequestAction
	112, // 85: bedrockbuf.PlaceStackRequestAction.transfer_stack_request_action:type_name -> bedrockbuf.TransferStackRequestAction
	118, // 86: bedrockbuf.PlayerBlockAction.block_pos:type_name -> bedrockbuf.Vector3i
	99,  // 87: bedrockbuf.PlayerListEntry.skin:type_name -> bedrockbuf.Skin
	54,  // 88: bedrockbuf.ReleaseItemTransactionData.held_item:type_name -> bedrockbuf.ItemInstance
	117, // 89: bedrockbuf.ReleaseItemTransactionData.head_position:type_name -> bedrockbuf.Vector3f
	87,  // 90: bedrockbuf.RepeatedRGBA.rgba:type_name -> bedrockbuf.RGBA
	89,  // 91: bedrockbuf.ShapedChemistryRecipe.input:type_name -> bedrockbuf.RecipeIngredientItem
	55,  // 92: bedrockbuf.ShapedChemistryRecipe.output:type_name -> bedrockbuf.ItemStack
	89,  // 93: bedrockbuf.ShapedRecipe.input:type_name -> bedrockbuf.RecipeIngredientItem
	55,  // 94: bedrockbuf.ShapedRecipe.output:type_name -> bedrockbuf.ItemStack
	89,  // 95: bedrockbuf.ShapelessChemistryRecipe.input:type_name -> bedrockbuf.RecipeIngredientItem
	55,  // 96: bedrockbuf.ShapelessChemistryRecipe.output:type_name -> bedrockbuf.ItemStack
	89,  // 97: bedrockbuf.ShapelessRecipe.input:type_name -> bedrockbuf.RecipeIngredientItem
	55,  // 98: bedrockbuf.ShapelessRecipe.output:type_name -> bedrockbuf.ItemStack
	89,  // 99: bedrockbuf.ShulkerBoxRecipe.input:type_name -> bedrockbuf.RecipeIngredientItem
	55,  // 100: bedrockbuf.ShulkerBoxRecipe.output:type_name -> bedrockbuf.ItemStack
	100, // 101: bedrockbuf.Skin.animations:type_name -> bedrockbuf.SkinAnimation
	74,  // 102: bedrockbuf.Skin.persona_pieces:type_name -> bedrockbuf.PersonaPiece
	75,  // 103: bedrockbuf.Skin.piece_tint_colours:type_name -> bedrockbuf.PersonaPieceTintColour
	105, // 104: bedrockbuf.StackResponseContainerInfo.slot_info:type_name -> bedrockbuf.StackResponseSlotInfo
	118, // 105: bedrockbuf.StructureSettings.size:type_name -> bedrockbuf.Vector3i
	118, // 106: bedrockbuf.StructureSettings.offset:type_name -> bedrockbuf.Vector3i
	117, // 107: bedrockbuf.StructureSettings.pivot:type_name -> bedrockbuf.Vector3f
	118, // 108: bedrockbuf.SubChunkEntry.offset:type_name -> bedrockbuf.Vector3i
	102, // 109: bedrockbuf.SwapStackRequestAction.source:type_name -> bedrockbuf.StackRequestSlotInfo
	102, // 110: bedrockbuf.SwapStackRequestAction.destination:type_name -> bedrockbuf.StackRequestSlotInfo
	112, // 111: bedrockbuf.TakeOutContainerStackRequestAction.transfer_stack_request_action:type_name -> bedrockbuf.TransferStackRequestAction
	112, // 112: bedrockbuf.TakeStackRequestAction.transfer_stack_request_action:type_name -> bedrockbuf.TransferStackRequestAction
	102, // 113: bedrockbuf.TransferStackRequestAction.source:type_name -> bedrockbuf.StackRequestSlotInfo
	102, // 114: bedrockbuf.TransferStackRequestAction.destination:type_name -> bedrockbuf.StackRequestSlotInfo
	54,  // 115: bedrockbuf.UseItemOnEntityTransactionData.held_item:type_name -> bedrockbuf.ItemInstance
	117, // 116: bedrockbuf.UseItemOnEntityTransactionData.position:type_name -> bedrockbuf.Vector3f
	117, // 117: bedrockbuf.UseItemOnEntityTransactionData.clicked_position:type_name -> bedrockbuf.Vector3f
	60,  // 118: bedrockbuf.UseItemTransactionData.legacy_set_item_slots:type_name -> bedrockbuf.LegacySetItemSlot
	50,  // 119: bedrockbuf.UseItemTransactionData.actions:type_name -> bedrockbuf.InventoryAction
	118, // 120: bedrockbuf.UseItemTransactionData.block_position:type_name -> bedrockbuf.Vector3i
	54,  // 121: bedrockbuf.UseItemTransactionData.held_item:type_name -> bedrockbuf.ItemInstance
	117, // 122: bedrockbuf.UseItemTransactionData.position:type_name -> bedrockbuf.Vector3f
	117, // 123: bedrockbuf.UseItemTransactionData.clicked_position:type_name -> bedrockbuf.Vector3f
	122, // 124: bedrockbuf.BlockEntry.PropertiesEntry.value:type_name -> google.protobuf.Any
	122, // 125: bedrockbuf.ItemComponentEntry.DataEntry.value:type_name -> google.protobuf.Any
	122, // 126: bedrockbuf.ItemStack.NbtDataEntry.value:type_name -> google.protobuf.Any
	127, // [127:127] is the sub-list for method output_type
	127, // [127:127] is the sub-list for method input_type
	127, // [127:127] is the sub-list for extension type_name
	127, // [127:127] is the sub-list for extension extendee
	0,   // [0:127] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementAwardedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentCommandEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoCraftRecipeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconPaymentStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehaviourPackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BellUsedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockChangeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossKilledEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CauldronInteractEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CauldronUsedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandEnumConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandOutputMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandOverload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposterInteractEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftCreativeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftGrindstoneRecipeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftLoomRecipeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftNonImplementedStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftRecipeOptionalStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftRecipeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftResultsDeprecatedStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreativeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EducationExternalLinkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EducationSharedResourceURI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantmentInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantmentOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityDefinitionTriggerEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityInteractEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractHoneyEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishBucketedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnaceDataRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnaceRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IInventoryTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemComponentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemEnchantments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemStackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabTableCombineStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacySetItemSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapDecoration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTrackedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialReducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialReducerOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MineBlockStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MismatchTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobBornEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobKilledEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovementAnomalyEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovementCorrectedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternRemovedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonaPiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonaPieceTintColour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetDiedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceInContainerStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBlockAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDiedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMovementSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalBuiltEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortalUsedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionContainerChangeRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidUpdateEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeIngredientItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseItemTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedRGBA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreboardEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreboardIdentityEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapedChemistryRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapedRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapelessChemistryRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapelessRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShulkerBoxRecipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinAnimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlashCommandExecutedEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackRequestSlotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackResourcePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackResponseContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackResponseSlotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubChunkEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeOutContainerStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexturePackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStackRequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseItemOnEntityTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseItemTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector2F); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector2I); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector3F); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector3I); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*IEventData_ProtocolAchievementAwardedEventData)(nil),
		(*IEventData_ProtocolAgentCommandEventData)(nil),
		(*IEventData_ProtocolBellUsedEventData)(nil),
		(*IEventData_ProtocolBossKilledEventData)(nil),
		(*IEventData_ProtocolCauldronInteractEventData)(nil),
		(*IEventData_ProtocolCauldronUsedEventData)(nil),
		(*IEventData_ProtocolComposterInteractEventData)(nil),
		(*IEventData_ProtocolEntityDefinitionTriggerEventData)(nil),
		(*IEventData_ProtocolEntityInteractEventData)(nil),
		(*IEventData_ProtocolExtractHoneyEventData)(nil),
		(*IEventData_ProtocolFishBucketedEventData)(nil),
		(*IEventData_ProtocolMobBornEventData)(nil),
		(*IEventData_ProtocolMobKilledEventData)(nil),
		(*IEventData_ProtocolMovementAnomalyEventData)(nil),
		(*IEventData_ProtocolMovementCorrectedEventData)(nil),
		(*IEventData_ProtocolPatternRemovedEventData)(nil),
		(*IEventData_ProtocolPetDiedEventData)(nil),
		(*IEventData_ProtocolPlayerDiedEventData)(nil),
		(*IEventData_ProtocolPortalBuiltEventData)(nil),
		(*IEventData_ProtocolPortalUsedEventData)(nil),
		(*IEventData_ProtocolRaidUpdateEventData)(nil),
		(*IEventData_ProtocolSlashCommandExecutedEventData)(nil),
	}
	file_types_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*IInventoryTransactionData_ProtocolMismatchTransactionData)(nil),
		(*IInventoryTransactionData_ProtocolNormalTransactionData)(nil),
		(*IInventoryTransactionData_ProtocolReleaseItemTransactionData)(nil),
		(*IInventoryTransactionData_ProtocolUseItemOnEntityTransactionData)(nil),
		(*IInventoryTransactionData_ProtocolUseItemTransactionData)(nil),
	}
	file_types_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*IRecipe_ProtocolFurnaceDataRecipe)(nil),
		(*IRecipe_ProtocolFurnaceRecipe)(nil),
		(*IRecipe_ProtocolMultiRecipe)(nil),
		(*IRecipe_ProtocolShapedChemistryRecipe)(nil),
		(*IRecipe_ProtocolShapedRecipe)(nil),
		(*IRecipe_ProtocolShapelessChemistryRecipe)(nil),
		(*IRecipe_ProtocolShapelessRecipe)(nil),
		(*IRecipe_ProtocolShulkerBoxRecipe)(nil),
	}
	file_types_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*IStackRequestAction_ProtocolAutoCraftRecipeStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolBeaconPaymentStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolConsumeStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftCreativeStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftGrindstoneRecipeStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftLoomRecipeStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftNonImplementedStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftRecipeOptionalStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftRecipeStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCraftResultsDeprecatedStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolCreateStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolDestroyStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolDropStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolLabTableCombineStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolMineBlockStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolPlaceInContainerStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolPlaceStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolSwapStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolTakeOutContainerStackRequestAction)(nil),
		(*IStackRequestAction_ProtocolTakeStackRequestAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   122,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
